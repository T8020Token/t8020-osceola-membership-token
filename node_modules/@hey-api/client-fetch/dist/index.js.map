{"version":3,"sources":["../../client-core/src/auth.ts","../../client-core/src/bodySerializer.ts","../../client-core/src/pathSerializer.ts","../src/utils.ts","../src/client.ts"],"names":["getAuthToken","auth","callback","token","serializeFormDataPair","data","key","value","serializeUrlSearchParamsPair","formDataBodySerializer","body","v","jsonBodySerializer","urlSearchParamsBodySerializer","separatorArrayExplode","style","separatorArrayNoExplode","separatorObjectExplode","serializeArrayParam","allowReserved","explode","name","joinedValues","separator","serializePrimitiveParam","serializeObjectParam","values","PATH_PARAM_RE","defaultPathSerializer","path","_url","url","matches","match","h","g","c","replaceValue","createQuerySerializer","array","object","queryParams","search","getParseAs","contentType","cleanContent","type","setAuthParams","security","options","x","buildUrl","getUrl","baseUrl","query","querySerializer","pathUrl","mergeConfigs","a","b","config","mergeHeaders","headers","mergedHeaders","header","iterator","Interceptors","fn","index","createInterceptors","defaultQuerySerializer","defaultHeaders","createConfig","override","z","createClient","_config","getConfig","setConfig","interceptors","request","opts","requestInit","_fetch","response","result","parseAs","error","finalError"],"mappings":"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","file":"index.js","sourcesContent":["export type AuthToken = string | undefined;\n\nexport interface Auth {\n  /**\n   * Which part of the request do we use to send the auth?\n   *\n   * @default 'header'\n   */\n  in?: 'header' | 'query';\n  /**\n   * Header or query parameter name.\n   *\n   * @default 'Authorization'\n   */\n  name?: string;\n  scheme?: 'basic' | 'bearer';\n  type: 'apiKey' | 'http';\n}\n\nexport const getAuthToken = async (\n  auth: Auth,\n  callback: ((auth: Auth) => Promise<AuthToken> | AuthToken) | AuthToken,\n): Promise<string | undefined> => {\n  const token =\n    typeof callback === 'function' ? await callback(auth) : callback;\n\n  if (!token) {\n    return;\n  }\n\n  if (auth.scheme === 'bearer') {\n    return `Bearer ${token}`;\n  }\n\n  if (auth.scheme === 'basic') {\n    return `Basic ${btoa(token)}`;\n  }\n\n  return token;\n};\n","import type {\n  ArrayStyle,\n  ObjectStyle,\n  SerializerOptions,\n} from './pathSerializer';\n\nexport type QuerySerializer = (query: Record<string, unknown>) => string;\n\nexport type BodySerializer = (body: any) => any;\n\nexport interface QuerySerializerOptions {\n  allowReserved?: boolean;\n  array?: SerializerOptions<ArrayStyle>;\n  object?: SerializerOptions<ObjectStyle>;\n}\n\nconst serializeFormDataPair = (data: FormData, key: string, value: unknown) => {\n  if (typeof value === 'string' || value instanceof Blob) {\n    data.append(key, value);\n  } else {\n    data.append(key, JSON.stringify(value));\n  }\n};\n\nconst serializeUrlSearchParamsPair = (\n  data: URLSearchParams,\n  key: string,\n  value: unknown,\n) => {\n  if (typeof value === 'string') {\n    data.append(key, value);\n  } else {\n    data.append(key, JSON.stringify(value));\n  }\n};\n\nexport const formDataBodySerializer = {\n  bodySerializer: <T extends Record<string, any> | Array<Record<string, any>>>(\n    body: T,\n  ) => {\n    const data = new FormData();\n\n    Object.entries(body).forEach(([key, value]) => {\n      if (value === undefined || value === null) {\n        return;\n      }\n      if (Array.isArray(value)) {\n        value.forEach((v) => serializeFormDataPair(data, key, v));\n      } else {\n        serializeFormDataPair(data, key, value);\n      }\n    });\n\n    return data;\n  },\n};\n\nexport const jsonBodySerializer = {\n  bodySerializer: <T>(body: T) =>\n    JSON.stringify(body, (key, value) =>\n      typeof value === 'bigint' ? value.toString() : value,\n    ),\n};\n\nexport const urlSearchParamsBodySerializer = {\n  bodySerializer: <T extends Record<string, any> | Array<Record<string, any>>>(\n    body: T,\n  ) => {\n    const data = new URLSearchParams();\n\n    Object.entries(body).forEach(([key, value]) => {\n      if (value === undefined || value === null) {\n        return;\n      }\n      if (Array.isArray(value)) {\n        value.forEach((v) => serializeUrlSearchParamsPair(data, key, v));\n      } else {\n        serializeUrlSearchParamsPair(data, key, value);\n      }\n    });\n\n    return data.toString();\n  },\n};\n","interface SerializeOptions<T>\n  extends SerializePrimitiveOptions,\n    SerializerOptions<T> {}\n\ninterface SerializePrimitiveOptions {\n  allowReserved?: boolean;\n  name: string;\n}\n\nexport interface SerializerOptions<T> {\n  /**\n   * @default true\n   */\n  explode: boolean;\n  style: T;\n}\n\nexport type ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\nexport type ArraySeparatorStyle = ArrayStyle | MatrixStyle;\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\nexport type ObjectStyle = 'form' | 'deepObject';\ntype ObjectSeparatorStyle = ObjectStyle | MatrixStyle;\n\ninterface SerializePrimitiveParam extends SerializePrimitiveOptions {\n  value: string;\n}\n\nexport const separatorArrayExplode = (style: ArraySeparatorStyle) => {\n  switch (style) {\n    case 'label':\n      return '.';\n    case 'matrix':\n      return ';';\n    case 'simple':\n      return ',';\n    default:\n      return '&';\n  }\n};\n\nexport const separatorArrayNoExplode = (style: ArraySeparatorStyle) => {\n  switch (style) {\n    case 'form':\n      return ',';\n    case 'pipeDelimited':\n      return '|';\n    case 'spaceDelimited':\n      return '%20';\n    default:\n      return ',';\n  }\n};\n\nexport const separatorObjectExplode = (style: ObjectSeparatorStyle) => {\n  switch (style) {\n    case 'label':\n      return '.';\n    case 'matrix':\n      return ';';\n    case 'simple':\n      return ',';\n    default:\n      return '&';\n  }\n};\n\nexport const serializeArrayParam = ({\n  allowReserved,\n  explode,\n  name,\n  style,\n  value,\n}: SerializeOptions<ArraySeparatorStyle> & {\n  value: unknown[];\n}) => {\n  if (!explode) {\n    const joinedValues = (\n      allowReserved ? value : value.map((v) => encodeURIComponent(v as string))\n    ).join(separatorArrayNoExplode(style));\n    switch (style) {\n      case 'label':\n        return `.${joinedValues}`;\n      case 'matrix':\n        return `;${name}=${joinedValues}`;\n      case 'simple':\n        return joinedValues;\n      default:\n        return `${name}=${joinedValues}`;\n    }\n  }\n\n  const separator = separatorArrayExplode(style);\n  const joinedValues = value\n    .map((v) => {\n      if (style === 'label' || style === 'simple') {\n        return allowReserved ? v : encodeURIComponent(v as string);\n      }\n\n      return serializePrimitiveParam({\n        allowReserved,\n        name,\n        value: v as string,\n      });\n    })\n    .join(separator);\n  return style === 'label' || style === 'matrix'\n    ? separator + joinedValues\n    : joinedValues;\n};\n\nexport const serializePrimitiveParam = ({\n  allowReserved,\n  name,\n  value,\n}: SerializePrimitiveParam) => {\n  if (value === undefined || value === null) {\n    return '';\n  }\n\n  if (typeof value === 'object') {\n    throw new Error(\n      'Deeply-nested arrays/objects aren’t supported. Provide your own `querySerializer()` to handle these.',\n    );\n  }\n\n  return `${name}=${allowReserved ? value : encodeURIComponent(value)}`;\n};\n\nexport const serializeObjectParam = ({\n  allowReserved,\n  explode,\n  name,\n  style,\n  value,\n}: SerializeOptions<ObjectSeparatorStyle> & {\n  value: Record<string, unknown> | Date;\n}) => {\n  if (value instanceof Date) {\n    return `${name}=${value.toISOString()}`;\n  }\n\n  if (style !== 'deepObject' && !explode) {\n    let values: string[] = [];\n    Object.entries(value).forEach(([key, v]) => {\n      values = [\n        ...values,\n        key,\n        allowReserved ? (v as string) : encodeURIComponent(v as string),\n      ];\n    });\n    const joinedValues = values.join(',');\n    switch (style) {\n      case 'form':\n        return `${name}=${joinedValues}`;\n      case 'label':\n        return `.${joinedValues}`;\n      case 'matrix':\n        return `;${name}=${joinedValues}`;\n      default:\n        return joinedValues;\n    }\n  }\n\n  const separator = separatorObjectExplode(style);\n  const joinedValues = Object.entries(value)\n    .map(([key, v]) =>\n      serializePrimitiveParam({\n        allowReserved,\n        name: style === 'deepObject' ? `${name}[${key}]` : key,\n        value: v as string,\n      }),\n    )\n    .join(separator);\n  return style === 'label' || style === 'matrix'\n    ? separator + joinedValues\n    : joinedValues;\n};\n","import type {\n  QuerySerializer,\n  QuerySerializerOptions,\n} from '@hey-api/client-core';\nimport {\n  getAuthToken,\n  jsonBodySerializer,\n  serializeArrayParam,\n  serializeObjectParam,\n  serializePrimitiveParam,\n} from '@hey-api/client-core';\n\nimport type { Client, ClientOptions, Config, RequestOptions } from './types';\n\ninterface PathSerializer {\n  path: Record<string, unknown>;\n  url: string;\n}\n\nconst PATH_PARAM_RE = /\\{[^{}]+\\}/g;\n\ntype ArrayStyle = 'form' | 'spaceDelimited' | 'pipeDelimited';\ntype MatrixStyle = 'label' | 'matrix' | 'simple';\ntype ArraySeparatorStyle = ArrayStyle | MatrixStyle;\n\nconst defaultPathSerializer = ({ path, url: _url }: PathSerializer) => {\n  let url = _url;\n  const matches = _url.match(PATH_PARAM_RE);\n  if (matches) {\n    for (const match of matches) {\n      let explode = false;\n      let name = match.substring(1, match.length - 1);\n      let style: ArraySeparatorStyle = 'simple';\n\n      if (name.endsWith('*')) {\n        explode = true;\n        name = name.substring(0, name.length - 1);\n      }\n\n      if (name.startsWith('.')) {\n        name = name.substring(1);\n        style = 'label';\n      } else if (name.startsWith(';')) {\n        name = name.substring(1);\n        style = 'matrix';\n      }\n\n      const value = path[name];\n\n      if (value === undefined || value === null) {\n        continue;\n      }\n\n      if (Array.isArray(value)) {\n        url = url.replace(\n          match,\n          serializeArrayParam({ explode, name, style, value }),\n        );\n        continue;\n      }\n\n      if (typeof value === 'object') {\n        url = url.replace(\n          match,\n          serializeObjectParam({\n            explode,\n            name,\n            style,\n            value: value as Record<string, unknown>,\n          }),\n        );\n        continue;\n      }\n\n      if (style === 'matrix') {\n        url = url.replace(\n          match,\n          `;${serializePrimitiveParam({\n            name,\n            value: value as string,\n          })}`,\n        );\n        continue;\n      }\n\n      const replaceValue = encodeURIComponent(\n        style === 'label' ? `.${value as string}` : (value as string),\n      );\n      url = url.replace(match, replaceValue);\n    }\n  }\n  return url;\n};\n\nexport const createQuerySerializer = <T = unknown>({\n  allowReserved,\n  array,\n  object,\n}: QuerySerializerOptions = {}) => {\n  const querySerializer = (queryParams: T) => {\n    let search: string[] = [];\n    if (queryParams && typeof queryParams === 'object') {\n      for (const name in queryParams) {\n        const value = queryParams[name];\n\n        if (value === undefined || value === null) {\n          continue;\n        }\n\n        if (Array.isArray(value)) {\n          search = [\n            ...search,\n            serializeArrayParam({\n              allowReserved,\n              explode: true,\n              name,\n              style: 'form',\n              value,\n              ...array,\n            }),\n          ];\n          continue;\n        }\n\n        if (typeof value === 'object') {\n          search = [\n            ...search,\n            serializeObjectParam({\n              allowReserved,\n              explode: true,\n              name,\n              style: 'deepObject',\n              value: value as Record<string, unknown>,\n              ...object,\n            }),\n          ];\n          continue;\n        }\n\n        search = [\n          ...search,\n          serializePrimitiveParam({\n            allowReserved,\n            name,\n            value: value as string,\n          }),\n        ];\n      }\n    }\n    return search.join('&');\n  };\n  return querySerializer;\n};\n\n/**\n * Infers parseAs value from provided Content-Type header.\n */\nexport const getParseAs = (\n  contentType: string | null,\n): Exclude<Config['parseAs'], 'auto'> => {\n  if (!contentType) {\n    // If no Content-Type header is provided, the best we can do is return the raw response body,\n    // which is effectively the same as the 'stream' option.\n    return 'stream';\n  }\n\n  const cleanContent = contentType.split(';')[0]?.trim();\n\n  if (!cleanContent) {\n    return;\n  }\n\n  if (\n    cleanContent.startsWith('application/json') ||\n    cleanContent.endsWith('+json')\n  ) {\n    return 'json';\n  }\n\n  if (cleanContent === 'multipart/form-data') {\n    return 'formData';\n  }\n\n  if (\n    ['application/', 'audio/', 'image/', 'video/'].some((type) =>\n      cleanContent.startsWith(type),\n    )\n  ) {\n    return 'blob';\n  }\n\n  if (cleanContent.startsWith('text/')) {\n    return 'text';\n  }\n};\n\nexport const setAuthParams = async ({\n  security,\n  ...options\n}: Pick<Required<RequestOptions>, 'security'> &\n  Pick<RequestOptions, 'auth' | 'query'> & {\n    headers: Headers;\n  }) => {\n  for (const auth of security) {\n    const token = await getAuthToken(auth, options.auth);\n\n    if (!token) {\n      continue;\n    }\n\n    const name = auth.name ?? 'Authorization';\n\n    switch (auth.in) {\n      case 'query':\n        if (!options.query) {\n          options.query = {};\n        }\n        options.query[name] = token;\n        break;\n      case 'header':\n      default:\n        options.headers.set(name, token);\n        break;\n    }\n\n    return;\n  }\n};\n\nexport const buildUrl: Client['buildUrl'] = (options) => {\n  const url = getUrl({\n    baseUrl: options.baseUrl as string,\n    path: options.path,\n    query: options.query,\n    querySerializer:\n      typeof options.querySerializer === 'function'\n        ? options.querySerializer\n        : createQuerySerializer(options.querySerializer),\n    url: options.url,\n  });\n  return url;\n};\n\nexport const getUrl = ({\n  baseUrl,\n  path,\n  query,\n  querySerializer,\n  url: _url,\n}: {\n  baseUrl?: string;\n  path?: Record<string, unknown>;\n  query?: Record<string, unknown>;\n  querySerializer: QuerySerializer;\n  url: string;\n}) => {\n  const pathUrl = _url.startsWith('/') ? _url : `/${_url}`;\n  let url = (baseUrl ?? '') + pathUrl;\n  if (path) {\n    url = defaultPathSerializer({ path, url });\n  }\n  let search = query ? querySerializer(query) : '';\n  if (search.startsWith('?')) {\n    search = search.substring(1);\n  }\n  if (search) {\n    url += `?${search}`;\n  }\n  return url;\n};\n\nexport const mergeConfigs = (a: Config, b: Config): Config => {\n  const config = { ...a, ...b };\n  if (config.baseUrl?.endsWith('/')) {\n    config.baseUrl = config.baseUrl.substring(0, config.baseUrl.length - 1);\n  }\n  config.headers = mergeHeaders(a.headers, b.headers);\n  return config;\n};\n\nexport const mergeHeaders = (\n  ...headers: Array<Required<Config>['headers'] | undefined>\n): Headers => {\n  const mergedHeaders = new Headers();\n  for (const header of headers) {\n    if (!header || typeof header !== 'object') {\n      continue;\n    }\n\n    const iterator =\n      header instanceof Headers ? header.entries() : Object.entries(header);\n\n    for (const [key, value] of iterator) {\n      if (value === null) {\n        mergedHeaders.delete(key);\n      } else if (Array.isArray(value)) {\n        for (const v of value) {\n          mergedHeaders.append(key, v as string);\n        }\n      } else if (value !== undefined) {\n        // assume object headers are meant to be JSON stringified, i.e. their\n        // content value in OpenAPI specification is 'application/json'\n        mergedHeaders.set(\n          key,\n          typeof value === 'object' ? JSON.stringify(value) : (value as string),\n        );\n      }\n    }\n  }\n  return mergedHeaders;\n};\n\ntype ErrInterceptor<Err, Res, Req, Options> = (\n  error: Err,\n  response: Res,\n  request: Req,\n  options: Options,\n) => Err | Promise<Err>;\n\ntype ReqInterceptor<Req, Options> = (\n  request: Req,\n  options: Options,\n) => Req | Promise<Req>;\n\ntype ResInterceptor<Res, Req, Options> = (\n  response: Res,\n  request: Req,\n  options: Options,\n) => Res | Promise<Res>;\n\nclass Interceptors<Interceptor> {\n  _fns: Interceptor[];\n\n  constructor() {\n    this._fns = [];\n  }\n\n  clear() {\n    this._fns = [];\n  }\n\n  exists(fn: Interceptor) {\n    return this._fns.indexOf(fn) !== -1;\n  }\n\n  eject(fn: Interceptor) {\n    const index = this._fns.indexOf(fn);\n    if (index !== -1) {\n      this._fns = [...this._fns.slice(0, index), ...this._fns.slice(index + 1)];\n    }\n  }\n\n  use(fn: Interceptor) {\n    this._fns = [...this._fns, fn];\n  }\n}\n\n// `createInterceptors()` response, meant for external use as it does not\n// expose internals\nexport interface Middleware<Req, Res, Err, Options> {\n  error: Pick<\n    Interceptors<ErrInterceptor<Err, Res, Req, Options>>,\n    'eject' | 'use'\n  >;\n  request: Pick<Interceptors<ReqInterceptor<Req, Options>>, 'eject' | 'use'>;\n  response: Pick<\n    Interceptors<ResInterceptor<Res, Req, Options>>,\n    'eject' | 'use'\n  >;\n}\n\n// do not add `Middleware` as return type so we can use _fns internally\nexport const createInterceptors = <Req, Res, Err, Options>() => ({\n  error: new Interceptors<ErrInterceptor<Err, Res, Req, Options>>(),\n  request: new Interceptors<ReqInterceptor<Req, Options>>(),\n  response: new Interceptors<ResInterceptor<Res, Req, Options>>(),\n});\n\nconst defaultQuerySerializer = createQuerySerializer({\n  allowReserved: false,\n  array: {\n    explode: true,\n    style: 'form',\n  },\n  object: {\n    explode: true,\n    style: 'deepObject',\n  },\n});\n\nconst defaultHeaders = {\n  'Content-Type': 'application/json',\n};\n\nexport const createConfig = <T extends ClientOptions = ClientOptions>(\n  override: Config<Omit<ClientOptions, keyof T> & T> = {},\n): Config<Omit<ClientOptions, keyof T> & T> => ({\n  ...jsonBodySerializer,\n  headers: defaultHeaders,\n  parseAs: 'auto',\n  querySerializer: defaultQuerySerializer,\n  ...override,\n});\n","import type { Client, Config, RequestOptions } from './types';\nimport {\n  buildUrl,\n  createConfig,\n  createInterceptors,\n  getParseAs,\n  mergeConfigs,\n  mergeHeaders,\n  setAuthParams,\n} from './utils';\n\ntype ReqInit = Omit<RequestInit, 'body' | 'headers'> & {\n  body?: any;\n  headers: ReturnType<typeof mergeHeaders>;\n};\n\nexport const createClient = (config: Config = {}): Client => {\n  let _config = mergeConfigs(createConfig(), config);\n\n  const getConfig = (): Config => ({ ..._config });\n\n  const setConfig = (config: Config): Config => {\n    _config = mergeConfigs(_config, config);\n    return getConfig();\n  };\n\n  const interceptors = createInterceptors<\n    Request,\n    Response,\n    unknown,\n    RequestOptions\n  >();\n\n  // @ts-expect-error\n  const request: Client['request'] = async (options) => {\n    const opts = {\n      ..._config,\n      ...options,\n      fetch: options.fetch ?? _config.fetch ?? globalThis.fetch,\n      headers: mergeHeaders(_config.headers, options.headers),\n    };\n\n    if (opts.security) {\n      await setAuthParams({\n        ...opts,\n        security: opts.security,\n      });\n    }\n\n    if (opts.body && opts.bodySerializer) {\n      opts.body = opts.bodySerializer(opts.body);\n    }\n\n    // remove Content-Type header if body is empty to avoid sending invalid requests\n    if (!opts.body) {\n      opts.headers.delete('Content-Type');\n    }\n\n    const url = buildUrl(opts);\n    const requestInit: ReqInit = {\n      redirect: 'follow',\n      ...opts,\n    };\n\n    let request = new Request(url, requestInit);\n\n    for (const fn of interceptors.request._fns) {\n      request = await fn(request, opts);\n    }\n\n    // fetch must be assigned here, otherwise it would throw the error:\n    // TypeError: Failed to execute 'fetch' on 'Window': Illegal invocation\n    const _fetch = opts.fetch!;\n    let response = await _fetch(request);\n\n    for (const fn of interceptors.response._fns) {\n      response = await fn(response, request, opts);\n    }\n\n    const result = {\n      request,\n      response,\n    };\n\n    if (response.ok) {\n      if (\n        response.status === 204 ||\n        response.headers.get('Content-Length') === '0'\n      ) {\n        return {\n          data: {},\n          ...result,\n        };\n      }\n\n      const parseAs =\n        (opts.parseAs === 'auto'\n          ? getParseAs(response.headers.get('Content-Type'))\n          : opts.parseAs) ?? 'json';\n\n      if (parseAs === 'stream') {\n        return {\n          data: response.body,\n          ...result,\n        };\n      }\n\n      let data = await response[parseAs]();\n      if (parseAs === 'json') {\n        if (opts.responseValidator) {\n          await opts.responseValidator(data);\n        }\n\n        if (opts.responseTransformer) {\n          data = await opts.responseTransformer(data);\n        }\n      }\n\n      return {\n        data,\n        ...result,\n      };\n    }\n\n    let error = await response.text();\n\n    try {\n      error = JSON.parse(error);\n    } catch {\n      // noop\n    }\n\n    let finalError = error;\n\n    for (const fn of interceptors.error._fns) {\n      finalError = (await fn(error, response, request, opts)) as string;\n    }\n\n    finalError = finalError || ({} as string);\n\n    if (opts.throwOnError) {\n      throw finalError;\n    }\n\n    return {\n      error: finalError,\n      ...result,\n    };\n  };\n\n  return {\n    buildUrl,\n    connect: (options) => request({ ...options, method: 'CONNECT' }),\n    delete: (options) => request({ ...options, method: 'DELETE' }),\n    get: (options) => request({ ...options, method: 'GET' }),\n    getConfig,\n    head: (options) => request({ ...options, method: 'HEAD' }),\n    interceptors,\n    options: (options) => request({ ...options, method: 'OPTIONS' }),\n    patch: (options) => request({ ...options, method: 'PATCH' }),\n    post: (options) => request({ ...options, method: 'POST' }),\n    put: (options) => request({ ...options, method: 'PUT' }),\n    request,\n    setConfig,\n    trace: (options) => request({ ...options, method: 'TRACE' }),\n  };\n};\n"]}