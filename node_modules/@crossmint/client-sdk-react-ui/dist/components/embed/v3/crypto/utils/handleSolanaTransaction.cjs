"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }var _chunk2WSEHVNPcjs = require('../../../../../chunk-2WSEHVNP.cjs');var _solana = require('@dynamic-labs/solana');var _web3js = require('@solana/web3.js');var _bs58 = require('bs58'); var _bs582 = _interopRequireDefault(_bs58);function f(h){return _chunk2WSEHVNPcjs.d.call(void 0, this,arguments,function*({primaryWallet:t,serializedTransaction:i,iframeClient:e}){let o;try{if(!_solana.isSolanaWallet.call(void 0, t))throw new Error("primaryWallet is not a Solana wallet");o=yield t.getSigner()}catch(r){console.error("[CryptoWalletConnectionHandler] failed to get signer",r),e.send("crypto:send-transaction:failed",{error:"Failed to get signer"});return}let n;try{n=_web3js.Transaction.from(_bs582.default.decode(i))}catch(r){console.error("[CryptoWalletConnectionHandler] failed to deserialize transaction",r),e.send("crypto:send-transaction:failed",{error:"Failed to deserialize transaction"});return}try{let{signature:r}=yield o.signAndSendTransaction(n);console.log("[CryptoWalletConnectionHandler] txId",r),e.send("crypto:send-transaction:success",{txId:r})}catch(r){console.error("[CryptoWalletConnectionHandler] failed to send transaction",r),e.send("crypto:send-transaction:failed",{error:r.message})}})}exports.handleSolanaTransaction = f;
