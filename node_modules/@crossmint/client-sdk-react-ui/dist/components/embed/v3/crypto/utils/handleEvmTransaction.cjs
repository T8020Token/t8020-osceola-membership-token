"use strict";Object.defineProperty(exports, "__esModule", {value: true});var _chunk2WSEHVNPcjs = require('../../../../../chunk-2WSEHVNP.cjs');var _commonsdkbase = require('@crossmint/common-sdk-base');var _ethereum = require('@dynamic-labs/ethereum');var _viem = require('viem');function u(I){return _chunk2WSEHVNPcjs.d.call(void 0, this,arguments,function*({primaryWallet:n,chain:c,serializedTransaction:i,iframeClient:r}){let{connector:l}=n,t=_commonsdkbase.blockchainToChainId.call(void 0, c);try{yield l.switchNetwork({networkChainId:t})}catch(e){console.error(`[CryptoWalletConnectionHandler] failed to switch network to ${t}`,e),r.send("crypto:send-transaction:failed",{error:e.message});return}let a;try{if(!_ethereum.isEthereumWallet.call(void 0, n))throw new Error("primaryWallet is not an ethereum wallet");if(a=yield n.getWalletClient(String(t)),!a)throw new Error(`primaryWallet.getWalletClient(${t}) returned undefined`)}catch(e){console.error("[CryptoWalletConnectionHandler] failed to get wallet client",e),r.send("crypto:send-transaction:failed",{error:e.message});return}let o;try{o=_viem.parseTransaction.call(void 0, i)}catch(e){console.error("[CryptoWalletConnectionHandler] failed to parse transaction",e),r.send("crypto:send-transaction:failed",{error:e.message});return}try{let e=yield a.sendTransaction(o);console.log("[CryptoWalletConnectionHandler] txId",e),r.send("crypto:send-transaction:success",{txId:e})}catch(e){console.error("[CryptoWalletConnectionHandler] failed to send transaction",e),r.send("crypto:send-transaction:failed",{error:e.message})}})}exports.handleEvmTransaction = u;
