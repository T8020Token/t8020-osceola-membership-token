import{d as s}from"../../../../../chunk-PXDN3KFO.js";import{blockchainToChainId as d}from"@crossmint/common-sdk-base";import{isEthereumWallet as p}from"@dynamic-labs/ethereum";import{parseTransaction as m}from"viem";function w(T){return s(this,arguments,function*({primaryWallet:n,chain:c,serializedTransaction:i,iframeClient:r}){let{connector:l}=n,t=d(c);try{yield l.switchNetwork({networkChainId:t})}catch(e){console.error(`[CryptoWalletConnectionHandler] failed to switch network to ${t}`,e),r.send("crypto:send-transaction:failed",{error:e.message});return}let a;try{if(!p(n))throw new Error("primaryWallet is not an ethereum wallet");if(a=yield n.getWalletClient(String(t)),!a)throw new Error(`primaryWallet.getWalletClient(${t}) returned undefined`)}catch(e){console.error("[CryptoWalletConnectionHandler] failed to get wallet client",e),r.send("crypto:send-transaction:failed",{error:e.message});return}let o;try{o=m(i)}catch(e){console.error("[CryptoWalletConnectionHandler] failed to parse transaction",e),r.send("crypto:send-transaction:failed",{error:e.message});return}try{let e=yield a.sendTransaction(o);console.log("[CryptoWalletConnectionHandler] txId",e),r.send("crypto:send-transaction:success",{txId:e})}catch(e){console.error("[CryptoWalletConnectionHandler] failed to send transaction",e),r.send("crypto:send-transaction:failed",{error:e.message})}})}export{w as handleEvmTransaction};
