"use strict";Object.defineProperty(exports, "__esModule", {value: true});var _chunk2WSEHVNPcjs = require('../../../../../chunk-2WSEHVNP.cjs');var _sui = require('@dynamic-labs/sui');var _transactions = require('@mysten/sui/transactions');function m(w){return _chunk2WSEHVNPcjs.d.call(void 0, this,arguments,function*({primaryWallet:r,serializedTransaction:i,iframeClient:t}){let n;try{if(!_sui.isSuiWallet.call(void 0, r))throw new Error("primaryWallet is not a Sui wallet");if(n=yield r.getWalletClient(),!n)throw new Error("Failed to get wallet client")}catch(e){console.error("[CryptoWalletConnectionHandler] failed to get wallet client",e),t.send("crypto:send-transaction:failed",{error:"Failed to get wallet client"});return}let a;try{a=_transactions.Transaction.from(i)}catch(e){console.error("[CryptoWalletConnectionHandler] failed to send transaction",e),t.send("crypto:send-transaction:failed",{error:"Failed to deserialize transaction"});return}let o;try{o=yield r.signTransaction(a)}catch(e){console.error("[CryptoWalletConnectionHandler] failed to sign transaction",e),t.send("crypto:send-transaction:failed",{error:e.message});return}try{let e=yield n.executeTransactionBlock({transactionBlock:o.bytes,signature:o.signature});console.log("[CryptoWalletConnectionHandler] executeTransactionBlockResponse",e),t.send("crypto:send-transaction:success",{txId:e.digest})}catch(e){console.error("[CryptoWalletConnectionHandler] failed to send transaction",e),t.send("crypto:send-transaction:failed",{error:e.message});return}})}exports.handleSuiTransaction = m;
