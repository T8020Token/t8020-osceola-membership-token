import { z } from 'zod';

declare const SIGNER_EVENTS: readonly ["start-onboarding", "complete-onboarding", "sign", "get-status", "get-attestation"];
type SignerIFrameEventName = (typeof SIGNER_EVENTS)[number];
declare const signerInboundEvents: {
    readonly "request:start-onboarding": z.ZodObject<{
        authData: z.ZodObject<{
            jwt: z.ZodString;
            apiKey: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            jwt: string;
            apiKey: string;
        }, {
            jwt: string;
            apiKey: string;
        }>;
        data: z.ZodObject<{
            authId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authId: string;
        }, {
            authId: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        authData: {
            jwt: string;
            apiKey: string;
        };
        data: {
            authId: string;
        };
    }, {
        authData: {
            jwt: string;
            apiKey: string;
        };
        data: {
            authId: string;
        };
    }>;
    readonly "request:get-attestation": z.ZodObject<{
        challenge: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        challenge: string;
    }, {
        challenge: string;
    }>;
    readonly "request:complete-onboarding": z.ZodObject<{
        authData: z.ZodObject<{
            jwt: z.ZodString;
            apiKey: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            jwt: string;
            apiKey: string;
        }, {
            jwt: string;
            apiKey: string;
        }>;
        data: z.ZodObject<{
            onboardingAuthentication: z.ZodObject<{
                encryptedOtp: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                encryptedOtp: string;
            }, {
                encryptedOtp: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            onboardingAuthentication: {
                encryptedOtp: string;
            };
        }, {
            onboardingAuthentication: {
                encryptedOtp: string;
            };
        }>;
    }, "strip", z.ZodTypeAny, {
        authData: {
            jwt: string;
            apiKey: string;
        };
        data: {
            onboardingAuthentication: {
                encryptedOtp: string;
            };
        };
    }, {
        authData: {
            jwt: string;
            apiKey: string;
        };
        data: {
            onboardingAuthentication: {
                encryptedOtp: string;
            };
        };
    }>;
    readonly "request:sign": z.ZodObject<{
        authData: z.ZodObject<{
            jwt: z.ZodString;
            apiKey: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            jwt: string;
            apiKey: string;
        }, {
            jwt: string;
            apiKey: string;
        }>;
        data: z.ZodObject<{
            keyType: z.ZodEnum<["secp256k1", "ed25519"]>;
            bytes: z.ZodString;
            encoding: z.ZodEnum<["base58", "base64", "hex"]>;
        }, "strip", z.ZodTypeAny, {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
            keyType: "secp256k1" | "ed25519";
        }, {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
            keyType: "secp256k1" | "ed25519";
        }>;
    }, "strip", z.ZodTypeAny, {
        authData: {
            jwt: string;
            apiKey: string;
        };
        data: {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
            keyType: "secp256k1" | "ed25519";
        };
    }, {
        authData: {
            jwt: string;
            apiKey: string;
        };
        data: {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
            keyType: "secp256k1" | "ed25519";
        };
    }>;
    readonly "request:get-status": z.ZodObject<{
        authData: z.ZodObject<{
            jwt: z.ZodString;
            apiKey: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            jwt: string;
            apiKey: string;
        }, {
            jwt: string;
            apiKey: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        authData: {
            jwt: string;
            apiKey: string;
        };
    }, {
        authData: {
            jwt: string;
            apiKey: string;
        };
    }>;
};
declare const signerOutboundEvents: {
    readonly "response:start-onboarding": z.ZodUnion<[z.ZodObject<{
        status: z.ZodLiteral<"error">;
        error: z.ZodString;
        code: z.ZodOptional<z.ZodString>;
        data: z.ZodOptional<z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        status: "error";
        error: string;
        code?: string | undefined;
        data?: any;
    }, {
        status: "error";
        error: string;
        code?: string | undefined;
        data?: any;
    }>, z.ZodIntersection<z.ZodObject<{
        status: z.ZodLiteral<"success">;
    }, "strip", z.ZodTypeAny, {
        status: "success";
    }, {
        status: "success";
    }>, z.ZodUnion<[z.ZodObject<{
        signerStatus: z.ZodEnum<["ready"]>;
        publicKeys: z.ZodRecord<z.ZodEnum<["secp256k1", "ed25519"]>, z.ZodObject<Omit<{
            bytes: z.ZodString;
            encoding: z.ZodEnum<["base58", "base64", "hex"]>;
            keyType: z.ZodEnum<["secp256k1", "ed25519"]>;
        }, "keyType">, "strip", z.ZodTypeAny, {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
        }, {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
        }>>;
    }, "strip", z.ZodTypeAny, {
        signerStatus: "ready";
        publicKeys: Partial<Record<"secp256k1" | "ed25519", {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
        }>>;
    }, {
        signerStatus: "ready";
        publicKeys: Partial<Record<"secp256k1" | "ed25519", {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
        }>>;
    }>, z.ZodObject<{
        signerStatus: z.ZodEnum<["new-device"]>;
    }, "strip", z.ZodTypeAny, {
        signerStatus: "new-device";
    }, {
        signerStatus: "new-device";
    }>]>>]>;
    readonly "response:get-attestation": z.ZodUnion<[z.ZodObject<{
        status: z.ZodLiteral<"error">;
        error: z.ZodString;
        code: z.ZodOptional<z.ZodString>;
        data: z.ZodOptional<z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        status: "error";
        error: string;
        code?: string | undefined;
        data?: any;
    }, {
        status: "error";
        error: string;
        code?: string | undefined;
        data?: any;
    }>, z.ZodIntersection<z.ZodObject<{
        status: z.ZodLiteral<"success">;
    }, "strip", z.ZodTypeAny, {
        status: "success";
    }, {
        status: "success";
    }>, z.ZodObject<{
        attestationDocument: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        attestationDocument: Record<string, any>;
    }, {
        attestationDocument: Record<string, any>;
    }>>]>;
    readonly "response:complete-onboarding": z.ZodUnion<[z.ZodObject<{
        status: z.ZodLiteral<"error">;
        error: z.ZodString;
        code: z.ZodOptional<z.ZodString>;
        data: z.ZodOptional<z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        status: "error";
        error: string;
        code?: string | undefined;
        data?: any;
    }, {
        status: "error";
        error: string;
        code?: string | undefined;
        data?: any;
    }>, z.ZodIntersection<z.ZodObject<{
        status: z.ZodLiteral<"success">;
    }, "strip", z.ZodTypeAny, {
        status: "success";
    }, {
        status: "success";
    }>, z.ZodObject<{
        signerStatus: z.ZodEnum<["ready"]>;
        publicKeys: z.ZodRecord<z.ZodEnum<["secp256k1", "ed25519"]>, z.ZodObject<Omit<{
            bytes: z.ZodString;
            encoding: z.ZodEnum<["base58", "base64", "hex"]>;
            keyType: z.ZodEnum<["secp256k1", "ed25519"]>;
        }, "keyType">, "strip", z.ZodTypeAny, {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
        }, {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
        }>>;
    }, "strip", z.ZodTypeAny, {
        signerStatus: "ready";
        publicKeys: Partial<Record<"secp256k1" | "ed25519", {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
        }>>;
    }, {
        signerStatus: "ready";
        publicKeys: Partial<Record<"secp256k1" | "ed25519", {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
        }>>;
    }>>]>;
    readonly "response:sign": z.ZodUnion<[z.ZodObject<{
        status: z.ZodLiteral<"error">;
        error: z.ZodString;
        code: z.ZodOptional<z.ZodString>;
        data: z.ZodOptional<z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        status: "error";
        error: string;
        code?: string | undefined;
        data?: any;
    }, {
        status: "error";
        error: string;
        code?: string | undefined;
        data?: any;
    }>, z.ZodIntersection<z.ZodObject<{
        status: z.ZodLiteral<"success">;
    }, "strip", z.ZodTypeAny, {
        status: "success";
    }, {
        status: "success";
    }>, z.ZodObject<{
        signature: z.ZodObject<{
            bytes: z.ZodString;
            encoding: z.ZodEnum<["base58", "base64", "hex"]>;
        }, "strip", z.ZodTypeAny, {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
        }, {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
        }>;
        publicKey: z.ZodObject<{
            bytes: z.ZodString;
            encoding: z.ZodEnum<["base58", "base64", "hex"]>;
            keyType: z.ZodEnum<["secp256k1", "ed25519"]>;
        }, "strip", z.ZodTypeAny, {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
            keyType: "secp256k1" | "ed25519";
        }, {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
            keyType: "secp256k1" | "ed25519";
        }>;
    }, "strip", z.ZodTypeAny, {
        publicKey: {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
            keyType: "secp256k1" | "ed25519";
        };
        signature: {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
        };
    }, {
        publicKey: {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
            keyType: "secp256k1" | "ed25519";
        };
        signature: {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
        };
    }>>]>;
    readonly "response:get-status": z.ZodUnion<[z.ZodObject<{
        status: z.ZodLiteral<"error">;
        error: z.ZodString;
        code: z.ZodOptional<z.ZodString>;
        data: z.ZodOptional<z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        status: "error";
        error: string;
        code?: string | undefined;
        data?: any;
    }, {
        status: "error";
        error: string;
        code?: string | undefined;
        data?: any;
    }>, z.ZodIntersection<z.ZodObject<{
        status: z.ZodLiteral<"success">;
    }, "strip", z.ZodTypeAny, {
        status: "success";
    }, {
        status: "success";
    }>, z.ZodUnion<[z.ZodObject<{
        signerStatus: z.ZodEnum<["ready"]>;
        publicKeys: z.ZodRecord<z.ZodEnum<["secp256k1", "ed25519"]>, z.ZodObject<Omit<{
            bytes: z.ZodString;
            encoding: z.ZodEnum<["base58", "base64", "hex"]>;
            keyType: z.ZodEnum<["secp256k1", "ed25519"]>;
        }, "keyType">, "strip", z.ZodTypeAny, {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
        }, {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
        }>>;
    }, "strip", z.ZodTypeAny, {
        signerStatus: "ready";
        publicKeys: Partial<Record<"secp256k1" | "ed25519", {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
        }>>;
    }, {
        signerStatus: "ready";
        publicKeys: Partial<Record<"secp256k1" | "ed25519", {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
        }>>;
    }>, z.ZodObject<{
        signerStatus: z.ZodEnum<["new-device"]>;
    }, "strip", z.ZodTypeAny, {
        signerStatus: "new-device";
    }, {
        signerStatus: "new-device";
    }>]>>]>;
};
type SignerInputEvent<E extends SignerIFrameEventName> = z.infer<(typeof signerInboundEvents)[`request:${E}`]>;
type SignerOutputEvent<E extends SignerIFrameEventName> = z.infer<(typeof signerOutboundEvents)[`response:${E}`]>;
declare const EXPORT_SIGNER_EVENTS: readonly ["export-signer"];
type ExportSignerEventName = (typeof EXPORT_SIGNER_EVENTS)[number];
declare const exportSignerInboundEvents: {
    readonly "request:export-signer": z.ZodObject<{
        authData: z.ZodObject<{
            jwt: z.ZodString;
            apiKey: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            jwt: string;
            apiKey: string;
        }, {
            jwt: string;
            apiKey: string;
        }>;
        data: z.ZodObject<{
            scheme: z.ZodUnion<[z.ZodLiteral<"ed25519">, z.ZodLiteral<"secp256k1">]>;
            encoding: z.ZodUnion<[z.ZodLiteral<"base58">, z.ZodLiteral<"hex">, z.ZodLiteral<"strkey">]>;
        }, "strip", z.ZodTypeAny, {
            encoding: "base58" | "hex" | "strkey";
            scheme: "secp256k1" | "ed25519";
        }, {
            encoding: "base58" | "hex" | "strkey";
            scheme: "secp256k1" | "ed25519";
        }>;
    }, "strip", z.ZodTypeAny, {
        authData: {
            jwt: string;
            apiKey: string;
        };
        data: {
            encoding: "base58" | "hex" | "strkey";
            scheme: "secp256k1" | "ed25519";
        };
    }, {
        authData: {
            jwt: string;
            apiKey: string;
        };
        data: {
            encoding: "base58" | "hex" | "strkey";
            scheme: "secp256k1" | "ed25519";
        };
    }>;
};
declare const exportSignerOutboundEvents: {
    readonly "response:export-signer": z.ZodUnion<[z.ZodObject<{
        status: z.ZodLiteral<"error">;
        error: z.ZodString;
        code: z.ZodOptional<z.ZodString>;
        data: z.ZodOptional<z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        status: "error";
        error: string;
        code?: string | undefined;
        data?: any;
    }, {
        status: "error";
        error: string;
        code?: string | undefined;
        data?: any;
    }>, z.ZodIntersection<z.ZodObject<{
        status: z.ZodLiteral<"success">;
    }, "strip", z.ZodTypeAny, {
        status: "success";
    }, {
        status: "success";
    }>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>]>;
};
type ExportSignerInputEvent<E extends ExportSignerEventName> = z.infer<(typeof exportSignerInboundEvents)[`request:${E}`]>;
type ExportSignerOutputEvent<E extends ExportSignerEventName> = z.infer<(typeof exportSignerOutboundEvents)[`response:${E}`]>;

export { EXPORT_SIGNER_EVENTS, type ExportSignerEventName, type ExportSignerInputEvent, type ExportSignerOutputEvent, SIGNER_EVENTS, type SignerIFrameEventName, type SignerInputEvent, type SignerOutputEvent, exportSignerInboundEvents, exportSignerOutboundEvents, signerInboundEvents, signerOutboundEvents };
