import { z } from 'zod';

declare const KeyTypeSchema: z.ZodEnum<["secp256k1", "ed25519"]>;
declare const KEY_TYPES: ("secp256k1" | "ed25519")[];
type KeyType = z.infer<typeof KeyTypeSchema>;
declare const EncodingSchema: z.ZodEnum<["base58", "base64", "hex"]>;
type Encoding = z.infer<typeof EncodingSchema>;
declare const KEY_ENCODINGS: ("base58" | "base64" | "hex")[];
declare const GetAttestationPayloadSchema: {
    request: z.ZodObject<{
        challenge: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        challenge: string;
    }, {
        challenge: string;
    }>;
    response: z.ZodUnion<[z.ZodObject<{
        status: z.ZodLiteral<"error">;
        error: z.ZodString;
        code: z.ZodOptional<z.ZodString>;
        data: z.ZodOptional<z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        status: "error";
        error: string;
        code?: string | undefined;
        data?: any;
    }, {
        status: "error";
        error: string;
        code?: string | undefined;
        data?: any;
    }>, z.ZodIntersection<z.ZodObject<{
        status: z.ZodLiteral<"success">;
    }, "strip", z.ZodTypeAny, {
        status: "success";
    }, {
        status: "success";
    }>, z.ZodObject<{
        attestationDocument: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        attestationDocument: Record<string, any>;
    }, {
        attestationDocument: Record<string, any>;
    }>>]>;
};
declare const StartOnboardingPayloadSchema: {
    request: z.ZodObject<{
        authData: z.ZodObject<{
            jwt: z.ZodString;
            apiKey: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            jwt: string;
            apiKey: string;
        }, {
            jwt: string;
            apiKey: string;
        }>;
        data: z.ZodObject<{
            authId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authId: string;
        }, {
            authId: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        authData: {
            jwt: string;
            apiKey: string;
        };
        data: {
            authId: string;
        };
    }, {
        authData: {
            jwt: string;
            apiKey: string;
        };
        data: {
            authId: string;
        };
    }>;
    response: z.ZodUnion<[z.ZodObject<{
        status: z.ZodLiteral<"error">;
        error: z.ZodString;
        code: z.ZodOptional<z.ZodString>;
        data: z.ZodOptional<z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        status: "error";
        error: string;
        code?: string | undefined;
        data?: any;
    }, {
        status: "error";
        error: string;
        code?: string | undefined;
        data?: any;
    }>, z.ZodIntersection<z.ZodObject<{
        status: z.ZodLiteral<"success">;
    }, "strip", z.ZodTypeAny, {
        status: "success";
    }, {
        status: "success";
    }>, z.ZodUnion<[z.ZodObject<{
        signerStatus: z.ZodEnum<["ready"]>;
        publicKeys: z.ZodRecord<z.ZodEnum<["secp256k1", "ed25519"]>, z.ZodObject<Omit<{
            bytes: z.ZodString;
            encoding: z.ZodEnum<["base58", "base64", "hex"]>;
            keyType: z.ZodEnum<["secp256k1", "ed25519"]>;
        }, "keyType">, "strip", z.ZodTypeAny, {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
        }, {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
        }>>;
    }, "strip", z.ZodTypeAny, {
        signerStatus: "ready";
        publicKeys: Partial<Record<"secp256k1" | "ed25519", {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
        }>>;
    }, {
        signerStatus: "ready";
        publicKeys: Partial<Record<"secp256k1" | "ed25519", {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
        }>>;
    }>, z.ZodObject<{
        signerStatus: z.ZodEnum<["new-device"]>;
    }, "strip", z.ZodTypeAny, {
        signerStatus: "new-device";
    }, {
        signerStatus: "new-device";
    }>]>>]>;
};
declare const CompleteOnboardingPayloadSchema: {
    request: z.ZodObject<{
        authData: z.ZodObject<{
            jwt: z.ZodString;
            apiKey: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            jwt: string;
            apiKey: string;
        }, {
            jwt: string;
            apiKey: string;
        }>;
        data: z.ZodObject<{
            onboardingAuthentication: z.ZodObject<{
                encryptedOtp: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                encryptedOtp: string;
            }, {
                encryptedOtp: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            onboardingAuthentication: {
                encryptedOtp: string;
            };
        }, {
            onboardingAuthentication: {
                encryptedOtp: string;
            };
        }>;
    }, "strip", z.ZodTypeAny, {
        authData: {
            jwt: string;
            apiKey: string;
        };
        data: {
            onboardingAuthentication: {
                encryptedOtp: string;
            };
        };
    }, {
        authData: {
            jwt: string;
            apiKey: string;
        };
        data: {
            onboardingAuthentication: {
                encryptedOtp: string;
            };
        };
    }>;
    response: z.ZodUnion<[z.ZodObject<{
        status: z.ZodLiteral<"error">;
        error: z.ZodString;
        code: z.ZodOptional<z.ZodString>;
        data: z.ZodOptional<z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        status: "error";
        error: string;
        code?: string | undefined;
        data?: any;
    }, {
        status: "error";
        error: string;
        code?: string | undefined;
        data?: any;
    }>, z.ZodIntersection<z.ZodObject<{
        status: z.ZodLiteral<"success">;
    }, "strip", z.ZodTypeAny, {
        status: "success";
    }, {
        status: "success";
    }>, z.ZodObject<{
        signerStatus: z.ZodEnum<["ready"]>;
        publicKeys: z.ZodRecord<z.ZodEnum<["secp256k1", "ed25519"]>, z.ZodObject<Omit<{
            bytes: z.ZodString;
            encoding: z.ZodEnum<["base58", "base64", "hex"]>;
            keyType: z.ZodEnum<["secp256k1", "ed25519"]>;
        }, "keyType">, "strip", z.ZodTypeAny, {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
        }, {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
        }>>;
    }, "strip", z.ZodTypeAny, {
        signerStatus: "ready";
        publicKeys: Partial<Record<"secp256k1" | "ed25519", {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
        }>>;
    }, {
        signerStatus: "ready";
        publicKeys: Partial<Record<"secp256k1" | "ed25519", {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
        }>>;
    }>>]>;
};
declare const GetPublicKeyPayloadSchema: {
    request: z.ZodObject<{
        authData: z.ZodObject<{
            jwt: z.ZodString;
            apiKey: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            jwt: string;
            apiKey: string;
        }, {
            jwt: string;
            apiKey: string;
        }>;
        data: z.ZodObject<{
            keyType: z.ZodEnum<["secp256k1", "ed25519"]>;
        }, "strip", z.ZodTypeAny, {
            keyType: "secp256k1" | "ed25519";
        }, {
            keyType: "secp256k1" | "ed25519";
        }>;
    }, "strip", z.ZodTypeAny, {
        authData: {
            jwt: string;
            apiKey: string;
        };
        data: {
            keyType: "secp256k1" | "ed25519";
        };
    }, {
        authData: {
            jwt: string;
            apiKey: string;
        };
        data: {
            keyType: "secp256k1" | "ed25519";
        };
    }>;
    response: z.ZodUnion<[z.ZodObject<{
        status: z.ZodLiteral<"error">;
        error: z.ZodString;
        code: z.ZodOptional<z.ZodString>;
        data: z.ZodOptional<z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        status: "error";
        error: string;
        code?: string | undefined;
        data?: any;
    }, {
        status: "error";
        error: string;
        code?: string | undefined;
        data?: any;
    }>, z.ZodIntersection<z.ZodObject<{
        status: z.ZodLiteral<"success">;
    }, "strip", z.ZodTypeAny, {
        status: "success";
    }, {
        status: "success";
    }>, z.ZodObject<{
        publicKey: z.ZodObject<{
            bytes: z.ZodString;
            encoding: z.ZodEnum<["base58", "base64", "hex"]>;
            keyType: z.ZodEnum<["secp256k1", "ed25519"]>;
        }, "strip", z.ZodTypeAny, {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
            keyType: "secp256k1" | "ed25519";
        }, {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
            keyType: "secp256k1" | "ed25519";
        }>;
    }, "strip", z.ZodTypeAny, {
        publicKey: {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
            keyType: "secp256k1" | "ed25519";
        };
    }, {
        publicKey: {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
            keyType: "secp256k1" | "ed25519";
        };
    }>>]>;
};
declare const GetStatusPayloadSchema: {
    request: z.ZodObject<{
        authData: z.ZodObject<{
            jwt: z.ZodString;
            apiKey: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            jwt: string;
            apiKey: string;
        }, {
            jwt: string;
            apiKey: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        authData: {
            jwt: string;
            apiKey: string;
        };
    }, {
        authData: {
            jwt: string;
            apiKey: string;
        };
    }>;
    response: z.ZodUnion<[z.ZodObject<{
        status: z.ZodLiteral<"error">;
        error: z.ZodString;
        code: z.ZodOptional<z.ZodString>;
        data: z.ZodOptional<z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        status: "error";
        error: string;
        code?: string | undefined;
        data?: any;
    }, {
        status: "error";
        error: string;
        code?: string | undefined;
        data?: any;
    }>, z.ZodIntersection<z.ZodObject<{
        status: z.ZodLiteral<"success">;
    }, "strip", z.ZodTypeAny, {
        status: "success";
    }, {
        status: "success";
    }>, z.ZodUnion<[z.ZodObject<{
        signerStatus: z.ZodEnum<["ready"]>;
        publicKeys: z.ZodRecord<z.ZodEnum<["secp256k1", "ed25519"]>, z.ZodObject<Omit<{
            bytes: z.ZodString;
            encoding: z.ZodEnum<["base58", "base64", "hex"]>;
            keyType: z.ZodEnum<["secp256k1", "ed25519"]>;
        }, "keyType">, "strip", z.ZodTypeAny, {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
        }, {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
        }>>;
    }, "strip", z.ZodTypeAny, {
        signerStatus: "ready";
        publicKeys: Partial<Record<"secp256k1" | "ed25519", {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
        }>>;
    }, {
        signerStatus: "ready";
        publicKeys: Partial<Record<"secp256k1" | "ed25519", {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
        }>>;
    }>, z.ZodObject<{
        signerStatus: z.ZodEnum<["new-device"]>;
    }, "strip", z.ZodTypeAny, {
        signerStatus: "new-device";
    }, {
        signerStatus: "new-device";
    }>]>>]>;
};
declare const SignPayloadSchema: {
    request: z.ZodObject<{
        authData: z.ZodObject<{
            jwt: z.ZodString;
            apiKey: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            jwt: string;
            apiKey: string;
        }, {
            jwt: string;
            apiKey: string;
        }>;
        data: z.ZodObject<{
            keyType: z.ZodEnum<["secp256k1", "ed25519"]>;
            bytes: z.ZodString;
            encoding: z.ZodEnum<["base58", "base64", "hex"]>;
        }, "strip", z.ZodTypeAny, {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
            keyType: "secp256k1" | "ed25519";
        }, {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
            keyType: "secp256k1" | "ed25519";
        }>;
    }, "strip", z.ZodTypeAny, {
        authData: {
            jwt: string;
            apiKey: string;
        };
        data: {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
            keyType: "secp256k1" | "ed25519";
        };
    }, {
        authData: {
            jwt: string;
            apiKey: string;
        };
        data: {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
            keyType: "secp256k1" | "ed25519";
        };
    }>;
    response: z.ZodUnion<[z.ZodObject<{
        status: z.ZodLiteral<"error">;
        error: z.ZodString;
        code: z.ZodOptional<z.ZodString>;
        data: z.ZodOptional<z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        status: "error";
        error: string;
        code?: string | undefined;
        data?: any;
    }, {
        status: "error";
        error: string;
        code?: string | undefined;
        data?: any;
    }>, z.ZodIntersection<z.ZodObject<{
        status: z.ZodLiteral<"success">;
    }, "strip", z.ZodTypeAny, {
        status: "success";
    }, {
        status: "success";
    }>, z.ZodObject<{
        signature: z.ZodObject<{
            bytes: z.ZodString;
            encoding: z.ZodEnum<["base58", "base64", "hex"]>;
        }, "strip", z.ZodTypeAny, {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
        }, {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
        }>;
        publicKey: z.ZodObject<{
            bytes: z.ZodString;
            encoding: z.ZodEnum<["base58", "base64", "hex"]>;
            keyType: z.ZodEnum<["secp256k1", "ed25519"]>;
        }, "strip", z.ZodTypeAny, {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
            keyType: "secp256k1" | "ed25519";
        }, {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
            keyType: "secp256k1" | "ed25519";
        }>;
    }, "strip", z.ZodTypeAny, {
        publicKey: {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
            keyType: "secp256k1" | "ed25519";
        };
        signature: {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
        };
    }, {
        publicKey: {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
            keyType: "secp256k1" | "ed25519";
        };
        signature: {
            bytes: string;
            encoding: "base58" | "base64" | "hex";
        };
    }>>]>;
};
declare const ExportSignerPayloadSchema: {
    request: z.ZodObject<{
        authData: z.ZodObject<{
            jwt: z.ZodString;
            apiKey: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            jwt: string;
            apiKey: string;
        }, {
            jwt: string;
            apiKey: string;
        }>;
        data: z.ZodObject<{
            scheme: z.ZodUnion<[z.ZodLiteral<"ed25519">, z.ZodLiteral<"secp256k1">]>;
            encoding: z.ZodUnion<[z.ZodLiteral<"base58">, z.ZodLiteral<"hex">, z.ZodLiteral<"strkey">]>;
        }, "strip", z.ZodTypeAny, {
            encoding: "base58" | "hex" | "strkey";
            scheme: "secp256k1" | "ed25519";
        }, {
            encoding: "base58" | "hex" | "strkey";
            scheme: "secp256k1" | "ed25519";
        }>;
    }, "strip", z.ZodTypeAny, {
        authData: {
            jwt: string;
            apiKey: string;
        };
        data: {
            encoding: "base58" | "hex" | "strkey";
            scheme: "secp256k1" | "ed25519";
        };
    }, {
        authData: {
            jwt: string;
            apiKey: string;
        };
        data: {
            encoding: "base58" | "hex" | "strkey";
            scheme: "secp256k1" | "ed25519";
        };
    }>;
    response: z.ZodUnion<[z.ZodObject<{
        status: z.ZodLiteral<"error">;
        error: z.ZodString;
        code: z.ZodOptional<z.ZodString>;
        data: z.ZodOptional<z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        status: "error";
        error: string;
        code?: string | undefined;
        data?: any;
    }, {
        status: "error";
        error: string;
        code?: string | undefined;
        data?: any;
    }>, z.ZodIntersection<z.ZodObject<{
        status: z.ZodLiteral<"success">;
    }, "strip", z.ZodTypeAny, {
        status: "success";
    }, {
        status: "success";
    }>, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>]>;
};

export { CompleteOnboardingPayloadSchema, type Encoding, ExportSignerPayloadSchema, GetAttestationPayloadSchema, GetPublicKeyPayloadSchema, GetStatusPayloadSchema, KEY_ENCODINGS, KEY_TYPES, type KeyType, SignPayloadSchema, StartOnboardingPayloadSchema };
