"use strict";Object.defineProperty(exports, "__esModule", {value: true});var _chunkNIHEG35Icjs = require('./chunk-NIHEG35I.cjs');var u=class{constructor(e,t,i){this.transport=e,this.incomingEvents=t,this.outgoingEvents=i}send(e,t){console.log("[EventEmitter] send() - Data to send:",t);let i=this.outgoingEvents[e].safeParse(t);i.success?(console.log(`[EventEmitter] send() - Data validation successful for event: ${String(e)}`),this.transport.send({event:e,data:t}),console.log(`[EventEmitter] send() - Successfully sent event: ${String(e)} via transport`)):console.error("Invalid data for event",e,i.error)}on(e,t){console.log(`[EventEmitter] on() called - Registering listener for event: ${String(e)}`);let i=r=>{if(console.log(`[EventEmitter] on() - Received message for event: ${String(r.data.event)}`),r.data.event===e){console.log("[EventEmitter] on() - Raw message data:",r.data.data);let o=this.incomingEvents[e].safeParse(r.data.data);o.success?(console.log("[EventEmitter] on() - Calling callback with validated data:",o.data),t(o.data),console.log(`[EventEmitter] on() - Callback completed for event: ${String(e)}`)):console.error("[EventEmitter] on() - Validation error:",o.error)}},n=this.transport.addMessageListener(i);return console.log(`[EventEmitter] on() - Listener registered with ID: ${n} for event: ${String(e)}`),n}sendAction({event:e,data:t,responseEvent:i,options:n}){var l;console.log("[EventEmitter] sendAction() - Data to send:",t);let r=(l=n==null?void 0:n.timeoutMs)!=null?l:7e3,o=n==null?void 0:n.maxRetries;return new Promise((v,E)=>{let s,a=0,c=setTimeout(()=>{console.log(`[EventEmitter] sendAction() - Timeout reached for response event: ${String(i)}`),s&&clearInterval(s),this.off(g),E(`Timed out waiting for ${String(i)} event${n!=null&&n.condition?", with condition,":""} after ${r/1e3}s`)},r),g=this.on(i,d=>{if(console.log("[EventEmitter] sendAction() - Response data:",d),n!=null&&n.condition&&!n.condition(d)){console.log(`[EventEmitter] sendAction() - Condition not met for response event: ${String(i)}`);return}console.log(`[EventEmitter] sendAction() - Condition satisfied for response event: ${String(i)}`),s&&clearInterval(s),console.log("[EventEmitter] sendAction() - Clearing timeout and removing listener"),clearTimeout(c),this.off(g),console.log(`[EventEmitter] sendAction() - Resolving promise with data for event: ${String(i)}`),v(d)});console.log(`[EventEmitter] sendAction() - Sending initial event: ${String(e)}`),this.send(e,t),n!=null&&n.intervalMs&&(console.log(`[EventEmitter] sendAction() - Setting up interval with intervalMs: ${n.intervalMs}`),s=setInterval(()=>{if(o!==void 0&&a>=o){console.log(`[EventEmitter] sendAction() - Max retries (${o}) reached for event: ${String(e)}`),clearInterval(s),clearTimeout(c),this.off(g),E(`Max retries (${o}) reached waiting for ${String(i)} event${n!=null&&n.condition?", with condition":""}`);return}a++,console.log(`[EventEmitter] sendAction() - Retry attempt ${a}/${o!=null?o:"\u221E"} for event: ${String(e)}`),this.send(e,t)},n==null?void 0:n.intervalMs)),console.log(`[EventEmitter] sendAction() - Action initiated, waiting for response: ${String(i)}`)})}onAction(n){return _chunkNIHEG35Icjs.e.call(void 0, this,null,function*(){var r=n,{event:e,options:t}=r,i=_chunkNIHEG35Icjs.c.call(void 0, r,["event","options"]);var l;console.log(`[EventEmitter] onAction() called - Event: ${String(e)}`);let o=(l=t==null?void 0:t.timeoutMs)!=null?l:7e3;return new Promise((v,E)=>{let s=setTimeout(()=>{console.log(`[EventEmitter] onAction() - Timeout reached for event: ${String(e)}`),E(`Timed out waiting for ${String(e)} event${t!=null&&t.condition?", with condition,":""} after ${o/1e3}s`)},o),a=this.on(e,c=>{if(console.log("[EventEmitter] onAction() - Received data:",c),t!=null&&t.condition&&!t.condition(c)){console.log(`[EventEmitter] onAction() - Condition not met for event: ${String(e)}`);return}if(console.log(`[EventEmitter] onAction() - Condition satisfied for event: ${String(e)}`),"callback"in i&&i.callback!=null){console.log(`[EventEmitter] onAction() - Executing callback for event: ${String(e)}`);let g=i.callback(c);console.log("[EventEmitter] onAction() - Callback result:",g),this.send(i.responseEvent,g)}console.log(`[EventEmitter] onAction() - Removing listener and clearing timeout for event: ${String(e)}`),this.off(a),clearTimeout(s),console.log(`[EventEmitter] onAction() - Resolving promise with data for event: ${String(e)}`),v(c)});console.log(`[EventEmitter] onAction() - Action listener registered, waiting for event: ${String(e)}`)})})}off(e){this.transport.removeMessageListener(e)}};exports.a = u;
