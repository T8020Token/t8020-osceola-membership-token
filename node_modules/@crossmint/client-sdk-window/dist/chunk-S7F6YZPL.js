import{a as r}from"./chunk-RB5HJKMB.js";import{a as v}from"./chunk-SGGYT3KY.js";import{a as t,b as o,d as c,e as i}from"./chunk-2NN7LKDP.js";import{z as a}from"zod";var k=class p extends r{constructor(n,e){let h=t(t({},e==null?void 0:e.incomingEvents),s.fromParent),E=t(t({},e==null?void 0:e.outgoingEvents),s.fromChild);super(n,h,E);this.isConnected=!1;this.handshakeOptions=t(t({},d),e==null?void 0:e.handshakeOptions)}handshakeWithParent(){return i(this,null,function*(){if(console.log("[HandshakeChild] handshakeWithParent() called"),this.isConnected){console.log("[HandshakeChild] Already connected to parent, skipping handshake");return}console.log("[HandshakeChild] Waiting for handshake request from parent");let{requestVerificationId:n}=yield this._onAction({event:"handshakeRequest",callback:e=>(console.log("[HandshakeChild] Received handshake request, processing data:",e),e),responseEvent:"handshakeResponse",options:{timeoutMs:this.handshakeOptions.timeoutMs}});console.log("[HandshakeChild] Waiting for handshake complete from parent"),yield this._onAction({event:"handshakeComplete",options:{timeoutMs:this.handshakeOptions.timeoutMs,condition:e=>e.requestVerificationId===n}}),this.isConnected=!0,console.log("[HandshakeChild] Handshake completed successfully, connection established")})}_onAction(n){return i(this,null,function*(){return console.log(`[HandshakeChild] _onAction() called - Event: ${String(n.event)}`),yield c(p.prototype,this,"onAction").call(this,o(t({},n),{options:n.options}))})}};var d={timeoutMs:1e4,intervalMs:100},s={fromChild:{handshakeResponse:a.object({requestVerificationId:a.string()})},fromParent:{handshakeRequest:a.object({requestVerificationId:a.string()}),handshakeComplete:a.object({requestVerificationId:a.string()})}};var g=class extends r{constructor(n,e){let h=t(t({},e==null?void 0:e.incomingEvents),s.fromChild),E=t(t({},e==null?void 0:e.outgoingEvents),s.fromParent);super(n,h,E);this.isConnected=!1;this.handshakeOptions=t(t({},d),e==null?void 0:e.handshakeOptions)}handshakeWithChild(){return i(this,null,function*(){if(console.log("[HandshakeParent] handshakeWithChild() called"),this.isConnected){console.log("[HandshakeParent] Already connected to child, skipping handshake");return}let n=v();console.log("[HandshakeParent] Starting handshake with child using timeout:",this.handshakeOptions.timeoutMs,"ms"),console.log("[HandshakeParent] Sending handshake request to child"),yield this._sendAction({event:"handshakeRequest",data:{requestVerificationId:n},responseEvent:"handshakeResponse",options:{timeoutMs:this.handshakeOptions.timeoutMs,intervalMs:this.handshakeOptions.intervalMs,condition:e=>e.requestVerificationId===n}}),console.log("[HandshakeParent] Received valid handshake response, sending handshake complete"),this._send("handshakeComplete",{requestVerificationId:n}),this.isConnected=!0,console.log("[HandshakeParent] Handshake completed successfully, connection established")})}_send(n,e){return console.log("[HandshakeParent] _send() - Data:",e),super.send(n,e)}_sendAction(n){return console.log(`[HandshakeParent] _sendAction() called - Event: ${String(n.event)}, ResponseEvent: ${String(n.responseEvent)}`),super.sendAction(o(t({},n),{options:n.options}))}};export{g as a,d as b,s as c,k as d};
