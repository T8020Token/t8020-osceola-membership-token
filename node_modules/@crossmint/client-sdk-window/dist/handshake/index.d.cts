import { z } from 'zod';
import { E as EventMap, a as EventEmitter, T as Transport, b as EventEmitterOptions } from '../EventEmitter-BSJu8y8c.cjs';

declare class HandshakeChild<IncomingEvents extends EventMap, OutgoingEvents extends EventMap> extends EventEmitter<IncomingEvents, OutgoingEvents> {
    handshakeOptions: Required<HandshakeOptions>;
    isConnected: boolean;
    constructor(transport: Transport<OutgoingEvents>, options?: EventEmitterWithHandshakeOptions<IncomingEvents, OutgoingEvents>);
    handshakeWithParent(): Promise<void>;
    private _onAction;
}

declare class HandshakeParent<IncomingEvents extends EventMap, OutgoingEvents extends EventMap> extends EventEmitter<IncomingEvents, OutgoingEvents> {
    handshakeOptions: Required<HandshakeOptions>;
    isConnected: boolean;
    constructor(transport: Transport<OutgoingEvents>, options?: EventEmitterWithHandshakeOptions<IncomingEvents, OutgoingEvents>);
    handshakeWithChild(): Promise<void>;
    private _send;
    private _sendAction;
}

interface HandshakeOptions {
    timeoutMs?: number;
    intervalMs?: number;
}
type EventEmitterWithHandshakeOptions<IncomingEvents extends EventMap = EventMap, OutgoingEvents extends EventMap = EventMap> = EventEmitterOptions<IncomingEvents, OutgoingEvents> & {
    handshakeOptions?: HandshakeOptions;
    targetOrigin?: string;
};
declare const DEFAULT_HANDSHAKE_OPTIONS: Required<HandshakeOptions>;
declare const HANDSHAKE_EVENTS: {
    fromChild: {
        readonly handshakeResponse: z.ZodObject<{
            requestVerificationId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            requestVerificationId: string;
        }, {
            requestVerificationId: string;
        }>;
    };
    fromParent: {
        readonly handshakeRequest: z.ZodObject<{
            requestVerificationId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            requestVerificationId: string;
        }, {
            requestVerificationId: string;
        }>;
        readonly handshakeComplete: z.ZodObject<{
            requestVerificationId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            requestVerificationId: string;
        }, {
            requestVerificationId: string;
        }>;
    };
};
type HandshakeEvents = typeof HANDSHAKE_EVENTS.fromParent & typeof HANDSHAKE_EVENTS.fromChild;
type HandshakeParentEvents = typeof HANDSHAKE_EVENTS.fromParent;
type HandshakeChildEvents = typeof HANDSHAKE_EVENTS.fromChild;

export { DEFAULT_HANDSHAKE_OPTIONS, type EventEmitterWithHandshakeOptions, HANDSHAKE_EVENTS, HandshakeChild, type HandshakeChildEvents, type HandshakeEvents, type HandshakeOptions, HandshakeParent, type HandshakeParentEvents };
