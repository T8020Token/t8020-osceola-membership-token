import { E as EventMap, T as Transport } from '../EventEmitter-BSJu8y8c.cjs';
import { HandshakeParent, EventEmitterWithHandshakeOptions } from '../handshake/index.cjs';
import 'zod';

type TransportClassConstructor<OutgoingEvents extends EventMap> = new (otherWindow: Window, targetOrigin: string | string[]) => Transport<OutgoingEvents>;
declare class IFrameWindow<IncomingEvents extends EventMap, OutgoingEvents extends EventMap> extends HandshakeParent<IncomingEvents, OutgoingEvents> {
    iframe: HTMLIFrameElement;
    private constructor();
    static init<IncomingEvents extends EventMap, OutgoingEvents extends EventMap>(urlOrExistingIframe: string | HTMLIFrameElement, options?: EventEmitterWithHandshakeOptions<IncomingEvents, OutgoingEvents>, TransportClass?: TransportClassConstructor<OutgoingEvents>): Promise<IFrameWindow<IncomingEvents, OutgoingEvents>>;
    static initExistingIFrame<IncomingEvents extends EventMap, OutgoingEvents extends EventMap>(iframe: HTMLIFrameElement, options?: EventEmitterWithHandshakeOptions<IncomingEvents, OutgoingEvents>, TransportClass?: TransportClassConstructor<OutgoingEvents>): IFrameWindow<IncomingEvents, OutgoingEvents>;
}

export { IFrameWindow };
