import { z } from 'zod';
import { E as EventMap, T as Transport, S as SimpleMessageEvent } from '../EventEmitter-BSJu8y8c.cjs';

declare class WindowTransport<OutgoingEvents extends EventMap = EventMap> implements Transport<OutgoingEvents> {
    protected otherWindow: Window;
    protected targetOrigin: string | string[];
    protected listeners: Map<string, (event: MessageEvent) => void>;
    constructor(otherWindow: Window, targetOrigin: string | string[]);
    send<K extends keyof OutgoingEvents>(message: {
        event: K;
        data: z.infer<OutgoingEvents[K]>;
    }): void;
    addMessageListener(listener: (event: SimpleMessageEvent) => void): string;
    removeMessageListener(id: string): void;
    protected isTargetOrigin(otherOrigin: string): boolean;
}

export { WindowTransport };
