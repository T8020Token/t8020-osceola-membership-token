import { UseSignInData } from '@farcaster/auth-kit';
import { CrossmintAuthOptions, AuthMaterialWithUser, CrossmintAuth, OAuthProvider } from '@crossmint/common-sdk-auth';
import { Crossmint, CrossmintApiClient } from '@crossmint/common-sdk-base';
import { StorageProvider } from './utils/storage.cjs';

type CrossmintAuthClientConfig = CrossmintAuthOptions & {
    callbacks?: CrossmintAuthClientCallbacks;
    logoutRoute?: string;
    storageProvider?: StorageProvider;
};
declare class CrossmintAuthClient extends CrossmintAuth {
    private callbacks;
    private refreshTask;
    private refreshPromise;
    private logoutRoute;
    private storageProvider;
    protected constructor(crossmint: Crossmint, apiClient: CrossmintApiClient, config?: CrossmintAuthClientConfig);
    static from(crossmint: Crossmint, config?: CrossmintAuthClientConfig): CrossmintAuthClient;
    getUser(): Promise<any>;
    storeAuthMaterial(authMaterial: AuthMaterialWithUser): Promise<void>;
    logout(): Promise<void>;
    handleRefreshAuthMaterial(refreshTokenSecret?: string): Promise<AuthMaterialWithUser | null>;
    getOAuthUrl(provider: OAuthProvider, options?: {
        appSchema?: string;
    }): Promise<any>;
    sendEmailOtp(email: string): Promise<any>;
    confirmEmailOtp(email: string, emailId: string, token: string): Promise<any>;
    signInWithFarcaster(data: UseSignInData): Promise<any>;
    signInWithSmartWallet(address: string, type: "evm" | "solana"): Promise<any>;
    authenticateSmartWallet(address: string, type: "evm" | "solana", signature: string): Promise<any>;
    private logoutFromCustomRoute;
    private scheduleNextRefresh;
    private cancelScheduledRefresh;
}
type CrossmintAuthClientCallbacks = {
    onTokenRefresh?: (authMaterial: AuthMaterialWithUser) => void;
    onLogout?: () => void;
};

export { CrossmintAuthClient, type CrossmintAuthClientConfig };
