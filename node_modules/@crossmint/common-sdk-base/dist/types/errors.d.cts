declare const PaymentErrors: {
    readonly MINT_CONFIG_INVALID: "payments:mint-config.invalid";
    readonly PAYMENT_METHOD_INVALID: "payments:payment-method.invalid";
    readonly EMAIL_INVALID: "payments:email.invalid";
    readonly CLIENT_ID_INVALID: "payments:client-id.invalid";
    readonly REQUIRED_RECIPIENT: "payments:recipient.required";
    readonly MINTING_CONTRACT_MISSING: "payments:minting-contract.missing";
    readonly COLLECTION_DISABLED: "payments:collection.disabled";
    readonly COLLECTION_UNAVAILABLE: "payments:collection.unavailable";
    readonly COLLECTION_UNVERIFIED: "payments:collection.unverified";
    readonly PROJECT_UNVERIFIED: "payments:project.unverified";
    readonly COLLECTION_SOLD_OUT: "payments:collection.sold-out";
    readonly COLLECTION_NOT_LIVE: "payments:collection.not-live";
    readonly COLLECTION_SALE_ENDED: "payments:collection.sale-ended";
    readonly USER_WALLET_LIMIT_REACHED: "payments:user-wallet.limit-reached";
    readonly USER_WALLET_NOT_WHITELISTED: "payments:user-wallet.not-whitelisted";
    readonly USER_WALLET_INVALID: "payments:user-wallet.invalid";
    readonly PAYMENT_REJECTED_GENERIC_DECLINE: "payments:payment-rejected.generic-decline";
    readonly PAYMENT_REJECTED_INSUFFICIENT_FUNDS: "payments:payment-rejected.insufficient-funds";
    readonly PAYMENT_REJECTED_CARD_LOST: "payments:payment-rejected.card-lost";
    readonly PAYMENT_REJECTED_CARD_STOLEN: "payments:payment-rejected.card-stolen";
    readonly PAYMENT_REJECTED_CARD_EXPIRED: "payments:payment-rejected.card-expired";
    readonly PAYMENT_REJECTED_CARD_INCORRECT_CVC: "payments:payment-rejected.card-incorrect-cvc";
    readonly PAYMENT_REJECTED_PROCESSING_ERROR: "payments:payment-rejected.processing-error";
    readonly PAYMENT_REJECTED_CARD_INCORRECT_NUMBER: "payments:payment-rejected.card-incorrect-number";
    readonly TRANSACTION_ERROR_GENERIC: "payments:transaction-error.generic";
    readonly CONTRACT_EXECUTION_REVERTED_GENERIC: "payments:contract-execution-reverted.generic";
    readonly EMBEDDED_CHECKOUT_NOT_ENABLED: "payments:embedded-checkout.not-enabled";
};
type PaymentErrors = (typeof PaymentErrors)[keyof typeof PaymentErrors];
declare const ValidationErrors: {
    readonly AMOUNT_REQUIRED: "validation:amount.required";
    readonly WALLET_ADDRESS_REQUIRED: "validation:wallet-address.required";
    readonly INVALID_EMAIL: "validation:email.invalid";
    readonly TOKEN_ENVIRONMENT_MISMATCH: "validation:token.environment-mismatch";
    readonly UNSUPPORTED_TOKEN: "validation:token.unsupported";
};
declare const LimitErrors: {
    readonly SINGLE_PURCHASE_EXCEEDED: "limits:single-purchase.exceeded";
    readonly DAILY_TRANSACTION_EXCEEDED: "limits:daily-transaction.exceeded";
    readonly TOKEN_DAILY_VOLUME_EXCEEDED: "limits:token-daily-volume.exceeded";
};
declare const ProjectErrors: {
    readonly ADDON_REQUIRED: "project:addon.required";
};
declare const SmartWalletErrorCode: {
    readonly TRANSFER: "smart-wallet:transfer";
    readonly SMART_WALLETS_NOT_ENABLED: "smart-wallet:not-enabled";
    readonly USER_WALLET_ALREADY_CREATED: "smart-wallet:user-wallet-already-created";
    readonly WALLET_CONFIG: "smart-wallet:config";
    readonly ADMIN_MISMATCH: "smart-wallet:config.admin-mismatch";
    readonly PASSKEY_MISMATCH: "smart-wallet:config.passkey-mismatch";
    readonly ADMIN_SIGNER_ALREADY_USED: "smart-wallet:config.admin-signer-already-used";
    readonly PASSKEY_PROMPT: "smart-wallet:passkey.prompt";
    readonly PASSKEY_INCOMPATIBLE_AUTHENTICATOR: "smart-wallet:passkey.incompatible-authenticator";
    readonly PASSKEY_REGISTRATION: "smart-wallet:passkey.registration";
    readonly UNCATEGORIZED: "smart-wallet:uncategorized";
};
type SmartWalletErrorCode = (typeof SmartWalletErrorCode)[keyof typeof SmartWalletErrorCode];
declare const WalletErrorCode: {
    API_KEY_INVALID: string;
    SIGNER_INVALID: string;
    WALLET_NOT_AVAILABLE: string;
    WALLET_CREATION_FAILED: string;
    WALLET_TYPE_INVALID: string;
    MESSAGE_INVALID: string;
    NO_SIGNATURE: string;
    SIGNING_FAILED: string;
    NO_TRANSACTION: string;
    TRANSACTION_FAILED: string;
    ENVIRONMENT_INVALID: string;
};
type WalletErrorCode = (typeof WalletErrorCode)[keyof typeof WalletErrorCode];
declare const CrossmintErrors: {
    NOT_AUTHORIZED: string;
    CROSSMINT_SERVICE: string;
    JWT_EXPIRED: string;
    JWT_INVALID: string;
    JWT_DECRYPTION: string;
    JWT_IDENTIFIER: string;
    OUT_OF_CREDITS: string;
    ADDON_REQUIRED: "project:addon.required";
    SINGLE_PURCHASE_EXCEEDED: "limits:single-purchase.exceeded";
    DAILY_TRANSACTION_EXCEEDED: "limits:daily-transaction.exceeded";
    TOKEN_DAILY_VOLUME_EXCEEDED: "limits:token-daily-volume.exceeded";
    AMOUNT_REQUIRED: "validation:amount.required";
    WALLET_ADDRESS_REQUIRED: "validation:wallet-address.required";
    INVALID_EMAIL: "validation:email.invalid";
    TOKEN_ENVIRONMENT_MISMATCH: "validation:token.environment-mismatch";
    UNSUPPORTED_TOKEN: "validation:token.unsupported";
    API_KEY_INVALID: string;
    SIGNER_INVALID: string;
    WALLET_NOT_AVAILABLE: string;
    WALLET_CREATION_FAILED: string;
    WALLET_TYPE_INVALID: string;
    MESSAGE_INVALID: string;
    NO_SIGNATURE: string;
    SIGNING_FAILED: string;
    NO_TRANSACTION: string;
    TRANSACTION_FAILED: string;
    ENVIRONMENT_INVALID: string;
    TRANSFER: "smart-wallet:transfer";
    SMART_WALLETS_NOT_ENABLED: "smart-wallet:not-enabled";
    USER_WALLET_ALREADY_CREATED: "smart-wallet:user-wallet-already-created";
    WALLET_CONFIG: "smart-wallet:config";
    ADMIN_MISMATCH: "smart-wallet:config.admin-mismatch";
    PASSKEY_MISMATCH: "smart-wallet:config.passkey-mismatch";
    ADMIN_SIGNER_ALREADY_USED: "smart-wallet:config.admin-signer-already-used";
    PASSKEY_PROMPT: "smart-wallet:passkey.prompt";
    PASSKEY_INCOMPATIBLE_AUTHENTICATOR: "smart-wallet:passkey.incompatible-authenticator";
    PASSKEY_REGISTRATION: "smart-wallet:passkey.registration";
    UNCATEGORIZED: "smart-wallet:uncategorized";
    MINT_CONFIG_INVALID: "payments:mint-config.invalid";
    PAYMENT_METHOD_INVALID: "payments:payment-method.invalid";
    EMAIL_INVALID: "payments:email.invalid";
    CLIENT_ID_INVALID: "payments:client-id.invalid";
    REQUIRED_RECIPIENT: "payments:recipient.required";
    MINTING_CONTRACT_MISSING: "payments:minting-contract.missing";
    COLLECTION_DISABLED: "payments:collection.disabled";
    COLLECTION_UNAVAILABLE: "payments:collection.unavailable";
    COLLECTION_UNVERIFIED: "payments:collection.unverified";
    PROJECT_UNVERIFIED: "payments:project.unverified";
    COLLECTION_SOLD_OUT: "payments:collection.sold-out";
    COLLECTION_NOT_LIVE: "payments:collection.not-live";
    COLLECTION_SALE_ENDED: "payments:collection.sale-ended";
    USER_WALLET_LIMIT_REACHED: "payments:user-wallet.limit-reached";
    USER_WALLET_NOT_WHITELISTED: "payments:user-wallet.not-whitelisted";
    USER_WALLET_INVALID: "payments:user-wallet.invalid";
    PAYMENT_REJECTED_GENERIC_DECLINE: "payments:payment-rejected.generic-decline";
    PAYMENT_REJECTED_INSUFFICIENT_FUNDS: "payments:payment-rejected.insufficient-funds";
    PAYMENT_REJECTED_CARD_LOST: "payments:payment-rejected.card-lost";
    PAYMENT_REJECTED_CARD_STOLEN: "payments:payment-rejected.card-stolen";
    PAYMENT_REJECTED_CARD_EXPIRED: "payments:payment-rejected.card-expired";
    PAYMENT_REJECTED_CARD_INCORRECT_CVC: "payments:payment-rejected.card-incorrect-cvc";
    PAYMENT_REJECTED_PROCESSING_ERROR: "payments:payment-rejected.processing-error";
    PAYMENT_REJECTED_CARD_INCORRECT_NUMBER: "payments:payment-rejected.card-incorrect-number";
    TRANSACTION_ERROR_GENERIC: "payments:transaction-error.generic";
    CONTRACT_EXECUTION_REVERTED_GENERIC: "payments:contract-execution-reverted.generic";
    EMBEDDED_CHECKOUT_NOT_ENABLED: "payments:embedded-checkout.not-enabled";
};
type CrossmintErrors = (typeof CrossmintErrors)[keyof typeof CrossmintErrors];

export { CrossmintErrors, LimitErrors, PaymentErrors, ProjectErrors, SmartWalletErrorCode, ValidationErrors, WalletErrorCode };
