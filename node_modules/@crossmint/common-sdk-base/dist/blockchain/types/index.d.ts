import { EVMBlockchainIncludingTestnet } from './evm.js';
export { EVMBlockchain, EVMBlockchainTestnet, EVM_BLOCKCHAINS_INCLUDING_TESTNETS, EVM_BLOCKCHAIN_TESTNETS, EVM_CHAINS } from './evm.js';
import { ObjectValues } from '../../types/utils.js';
export { BLOCKCHAIN_BASE_LAYERS, BlockchainBaseLayer } from './baseLayers.js';
export { Wallet } from './wallet.js';

interface EVMNFT {
    chain: EVMBlockchainIncludingTestnet;
    contractAddress: string;
    tokenId: string;
}
interface SolanaNFT {
    mintHash: string;
    chain: "solana";
}
type NFTLocator<T extends Blockchain> = `${T}:${string}${T extends EVMBlockchainIncludingTestnet ? `:${string}` : ""}`;
type NFT = SolanaNFT | EVMNFT;
type NFTOrNFTLocator = NFT | NFTLocator<"solana"> | NFTLocator<"ethereum"> | NFTLocator<"polygon"> | NFTLocator<"bsc">;

declare const Blockchain: {
    readonly ETHEREUM: "ethereum";
    readonly POLYGON: "polygon";
    readonly BSC: "bsc";
    readonly OPTIMISM: "optimism";
    readonly ARBITRUM: "arbitrum";
    readonly BASE: "base";
    readonly ZORA: "zora";
    readonly ARBITRUMNOVA: "arbitrumnova";
    readonly ZKATANA: "zkatana";
    readonly ZKYOTO: "zkyoto";
    readonly ASTAR_ZKEVM: "astar-zkevm";
    readonly CHILIZ: "chiliz";
    readonly STORY: "story";
    readonly MODE: "mode";
    readonly SHAPE: "shape";
    readonly WORLDCHAIN: "world-chain";
    readonly ABSTRACT: "abstract";
    readonly APECHAIN: "apechain";
    readonly MANTLE: "mantle";
    readonly SCROLL: "scroll";
    readonly SEI_PACIFIC_1: "sei-pacific-1";
    readonly FLOW: "flow";
    readonly SOLANA: "solana";
    readonly SUI: "sui";
    readonly APTOS: "aptos";
};
type Blockchain = ObjectValues<typeof Blockchain>;
declare const BLOCKCHAINS: readonly ("mode" | "ethereum" | "polygon" | "bsc" | "optimism" | "arbitrum" | "base" | "zora" | "arbitrumnova" | "zkatana" | "zkyoto" | "astar-zkevm" | "chiliz" | "story" | "shape" | "world-chain" | "abstract" | "apechain" | "mantle" | "scroll" | "sei-pacific-1" | "flow" | "solana" | "sui" | "aptos")[];
declare const BlockchainTestnet: {
    readonly ARBITRUM_SEPOLIA: "arbitrum-sepolia";
    readonly BASE_GOERLI: "base-goerli";
    readonly BASE_SEPOLIA: "base-sepolia";
    readonly BSC_TESTNET: "bsc-testnet";
    readonly ETHEREUM_GOERLI: "ethereum-goerli";
    readonly ETHEREUM_SEPOLIA: "ethereum-sepolia";
    readonly POLYGON_MUMBAI: "polygon-mumbai";
    readonly POLYGON_AMOY: "polygon-amoy";
    readonly OPTIMISM_GOERLI: "optimism-goerli";
    readonly OPTIMISM_SEPOLIA: "optimism-sepolia";
    readonly ZORA_GOERLI: "zora-goerli";
    readonly ZORA_SEPOLIA: "zora-sepolia";
    readonly HYPERSONIC_TESTNET: "hypersonic-testnet";
    readonly STORY_TESTNET: "story-testnet";
    readonly MODE_SEPOLIA: "mode-sepolia";
    readonly ABSTRACT_TESTNET: "abstract-testnet";
    readonly CURTIS: "curtis";
    readonly MANTLE_SEPOLIA: "mantle-sepolia";
    readonly SCROLL_SEPOLIA: "scroll-sepolia";
    readonly SEI_ATLANTIC_2_TESTNET: "sei-atlantic-2-testnet";
    readonly WORLD_CHAIN_SEPOLIA: "world-chain-sepolia";
    readonly FLOW_TESTNET: "flow-testnet";
};
type BlockchainTestnet = ObjectValues<typeof BlockchainTestnet>;
declare const BLOCKCHAIN_TESTNETS: readonly ("arbitrum-sepolia" | "base-goerli" | "base-sepolia" | "bsc-testnet" | "ethereum-goerli" | "ethereum-sepolia" | "polygon-mumbai" | "polygon-amoy" | "optimism-goerli" | "optimism-sepolia" | "zora-goerli" | "zora-sepolia" | "hypersonic-testnet" | "story-testnet" | "mode-sepolia" | "abstract-testnet" | "curtis" | "mantle-sepolia" | "scroll-sepolia" | "sei-atlantic-2-testnet" | "world-chain-sepolia" | "flow-testnet")[];
declare const BlockchainIncludingTestnet: {
    readonly ARBITRUM_SEPOLIA: "arbitrum-sepolia";
    readonly BASE_GOERLI: "base-goerli";
    readonly BASE_SEPOLIA: "base-sepolia";
    readonly BSC_TESTNET: "bsc-testnet";
    readonly ETHEREUM_GOERLI: "ethereum-goerli";
    readonly ETHEREUM_SEPOLIA: "ethereum-sepolia";
    readonly POLYGON_MUMBAI: "polygon-mumbai";
    readonly POLYGON_AMOY: "polygon-amoy";
    readonly OPTIMISM_GOERLI: "optimism-goerli";
    readonly OPTIMISM_SEPOLIA: "optimism-sepolia";
    readonly ZORA_GOERLI: "zora-goerli";
    readonly ZORA_SEPOLIA: "zora-sepolia";
    readonly HYPERSONIC_TESTNET: "hypersonic-testnet";
    readonly STORY_TESTNET: "story-testnet";
    readonly MODE_SEPOLIA: "mode-sepolia";
    readonly ABSTRACT_TESTNET: "abstract-testnet";
    readonly CURTIS: "curtis";
    readonly MANTLE_SEPOLIA: "mantle-sepolia";
    readonly SCROLL_SEPOLIA: "scroll-sepolia";
    readonly SEI_ATLANTIC_2_TESTNET: "sei-atlantic-2-testnet";
    readonly WORLD_CHAIN_SEPOLIA: "world-chain-sepolia";
    readonly FLOW_TESTNET: "flow-testnet";
    readonly ETHEREUM: "ethereum";
    readonly POLYGON: "polygon";
    readonly BSC: "bsc";
    readonly OPTIMISM: "optimism";
    readonly ARBITRUM: "arbitrum";
    readonly BASE: "base";
    readonly ZORA: "zora";
    readonly ARBITRUMNOVA: "arbitrumnova";
    readonly ZKATANA: "zkatana";
    readonly ZKYOTO: "zkyoto";
    readonly ASTAR_ZKEVM: "astar-zkevm";
    readonly CHILIZ: "chiliz";
    readonly STORY: "story";
    readonly MODE: "mode";
    readonly SHAPE: "shape";
    readonly WORLDCHAIN: "world-chain";
    readonly ABSTRACT: "abstract";
    readonly APECHAIN: "apechain";
    readonly MANTLE: "mantle";
    readonly SCROLL: "scroll";
    readonly SEI_PACIFIC_1: "sei-pacific-1";
    readonly FLOW: "flow";
    readonly SOLANA: "solana";
    readonly SUI: "sui";
    readonly APTOS: "aptos";
};
type BlockchainIncludingTestnet = ObjectValues<typeof BlockchainIncludingTestnet>;
declare const BLOCKCHAINS_INCLUDING_TESTNETS: readonly ("mode" | "ethereum" | "polygon" | "bsc" | "optimism" | "arbitrum" | "base" | "zora" | "arbitrumnova" | "zkatana" | "zkyoto" | "astar-zkevm" | "chiliz" | "story" | "shape" | "world-chain" | "abstract" | "apechain" | "mantle" | "scroll" | "sei-pacific-1" | "flow" | "arbitrum-sepolia" | "base-goerli" | "base-sepolia" | "bsc-testnet" | "ethereum-goerli" | "ethereum-sepolia" | "polygon-mumbai" | "polygon-amoy" | "optimism-goerli" | "optimism-sepolia" | "zora-goerli" | "zora-sepolia" | "hypersonic-testnet" | "story-testnet" | "mode-sepolia" | "abstract-testnet" | "curtis" | "mantle-sepolia" | "scroll-sepolia" | "sei-atlantic-2-testnet" | "world-chain-sepolia" | "flow-testnet" | "solana" | "sui" | "aptos")[];
declare const PayerSupportedBlockchains: {
    readonly ARBITRUM_SEPOLIA: "arbitrum-sepolia";
    readonly BASE_GOERLI: "base-goerli";
    readonly BASE_SEPOLIA: "base-sepolia";
    readonly BSC_TESTNET: "bsc-testnet";
    readonly ETHEREUM_GOERLI: "ethereum-goerli";
    readonly ETHEREUM_SEPOLIA: "ethereum-sepolia";
    readonly POLYGON_MUMBAI: "polygon-mumbai";
    readonly POLYGON_AMOY: "polygon-amoy";
    readonly OPTIMISM_GOERLI: "optimism-goerli";
    readonly OPTIMISM_SEPOLIA: "optimism-sepolia";
    readonly ZORA_GOERLI: "zora-goerli";
    readonly ZORA_SEPOLIA: "zora-sepolia";
    readonly HYPERSONIC_TESTNET: "hypersonic-testnet";
    readonly STORY_TESTNET: "story-testnet";
    readonly MODE_SEPOLIA: "mode-sepolia";
    readonly ABSTRACT_TESTNET: "abstract-testnet";
    readonly CURTIS: "curtis";
    readonly MANTLE_SEPOLIA: "mantle-sepolia";
    readonly SCROLL_SEPOLIA: "scroll-sepolia";
    readonly SEI_ATLANTIC_2_TESTNET: "sei-atlantic-2-testnet";
    readonly WORLD_CHAIN_SEPOLIA: "world-chain-sepolia";
    readonly FLOW_TESTNET: "flow-testnet";
    readonly ETHEREUM: "ethereum";
    readonly POLYGON: "polygon";
    readonly BSC: "bsc";
    readonly OPTIMISM: "optimism";
    readonly ARBITRUM: "arbitrum";
    readonly BASE: "base";
    readonly ZORA: "zora";
    readonly ARBITRUMNOVA: "arbitrumnova";
    readonly ZKATANA: "zkatana";
    readonly ZKYOTO: "zkyoto";
    readonly ASTAR_ZKEVM: "astar-zkevm";
    readonly CHILIZ: "chiliz";
    readonly STORY: "story";
    readonly MODE: "mode";
    readonly SHAPE: "shape";
    readonly WORLDCHAIN: "world-chain";
    readonly ABSTRACT: "abstract";
    readonly APECHAIN: "apechain";
    readonly MANTLE: "mantle";
    readonly SCROLL: "scroll";
    readonly SEI_PACIFIC_1: "sei-pacific-1";
    readonly FLOW: "flow";
    readonly SOLANA: "solana";
};
type PayerSupportedBlockchains = ObjectValues<typeof PayerSupportedBlockchains>;

export { BLOCKCHAINS, BLOCKCHAINS_INCLUDING_TESTNETS, BLOCKCHAIN_TESTNETS, Blockchain, BlockchainIncludingTestnet, BlockchainTestnet, EVMBlockchainIncludingTestnet, type EVMNFT, type NFT, type NFTLocator, type NFTOrNFTLocator, PayerSupportedBlockchains, type SolanaNFT };
