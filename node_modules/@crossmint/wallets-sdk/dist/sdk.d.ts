import { Crossmint } from '@crossmint/common-sdk-base';
export { Crossmint, createCrossmint } from '@crossmint/common-sdk-base';
import { Wallet } from './wallets/wallet.js';
import { Chain } from './chains/chains.js';
import { WalletArgsFor } from './wallets/types.js';
import './api/client.js';
import './api/types.js';
import 'viem';
import './api/gen/types.gen.js';
import './signers/types.js';
import 'ox';
import '@crossmint/client-sdk-window';
import '@crossmint/client-signers';
import '@solana/web3.js';
import 'abitype';

declare class CrossmintWallets {
    private readonly walletFactory;
    private constructor();
    /**
     * Initialize the Wallets SDK
     * @param crossmint - Crossmint data (use `createCrossmint` to initialize)
     * @returns A new CrossmintWallets instance
     */
    static from(crossmint: Crossmint): CrossmintWallets;
    /**
     * Get or create a wallet, can only be called on the client side
     * @param args - Wallet data
     * @param options - Wallet options
     * @returns An existing wallet or a new wallet
     */
    getOrCreateWallet<C extends Chain>(options: WalletArgsFor<C>): Promise<Wallet<C>>;
    /**
     * Get an existing wallet by its locator, can only be called on the server side
     * @param walletLocator - Wallet locator
     * @param options - Wallet options
     * @returns A wallet if found, throws WalletNotAvailableError if not found
     */
    getWallet<C extends Chain>(walletLocator: string, options: WalletArgsFor<C>): Promise<Wallet<C>>;
    /**
     * Create a new wallet, can only be called on the server side
     * @param options - Wallet options
     * @returns A new wallet
     */
    createWallet<C extends Chain>(options: WalletArgsFor<C>): Promise<Wallet<C>>;
}

export { CrossmintWallets };
