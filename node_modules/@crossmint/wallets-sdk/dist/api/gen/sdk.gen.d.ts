import { WalletsV1ControllerSubmitMeApprovals5Data, WalletsV1ControllerSubmitMeApprovals5Responses, WalletsV1ControllerSubmitMeApprovals5Errors, WalletsV1ControllerGetMeTransaction5Data, WalletsV1ControllerGetMeTransaction5Responses, WalletsV1ControllerGetMeTransaction5Errors, WalletsV1ControllerGetMeTransactionsWithoutChain5Data, WalletsV1ControllerGetMeTransactionsWithoutChain5Responses, WalletsV1ControllerGetMeTransactionsWithoutChain5Errors, WalletsV1ControllerCreateMeTransaction5Data, WalletsV1ControllerCreateMeTransaction5Responses, WalletsV1ControllerCreateMeTransaction5Errors, WalletsV1ControllerGetMeDelegatedSigner5Data, WalletsV1ControllerGetMeDelegatedSigner5Responses, WalletsV1ControllerGetMeDelegatedSigner5Errors, WalletsV1ControllerCreateMeDelegatedSigner5Data, WalletsV1ControllerCreateMeDelegatedSigner5Responses, WalletsV1ControllerCreateMeDelegatedSigner5Errors, WalletsV1ControllerSubmitMeSignatureApprovals5Data, WalletsV1ControllerSubmitMeSignatureApprovals5Responses, WalletsV1ControllerSubmitMeSignatureApprovals5Errors, WalletsV1ControllerGetMeSignature5Data, WalletsV1ControllerGetMeSignature5Responses, WalletsV1ControllerGetMeSignature5Errors, WalletsV1ControllerCreateMeSignatureRequest5Data, WalletsV1ControllerCreateMeSignatureRequest5Responses, WalletsV1ControllerCreateMeSignatureRequest5Errors, WalletsV1ControllerGetMeWalletActivity5Data, WalletsV1ControllerGetMeWalletActivity5Responses, WalletsV1ControllerGetMeWalletActivity5Errors, WalletsV1ControllerGetMeWallet5Data, WalletsV1ControllerGetMeWallet5Responses, WalletsV1ControllerCreateMeWallet5Data, WalletsV1ControllerCreateMeWallet5Responses, WalletsV1ControllerSubmitApprovals5Data, WalletsV1ControllerSubmitApprovals5Responses, WalletsV1ControllerSubmitApprovals5Errors, WalletsV1ControllerGetTransaction5Data, WalletsV1ControllerGetTransaction5Responses, WalletsV1ControllerGetTransaction5Errors, WalletsV1ControllerGetTransactionsWithoutChain5Data, WalletsV1ControllerGetTransactionsWithoutChain5Responses, WalletsV1ControllerGetTransactionsWithoutChain5Errors, WalletsV1ControllerCreateTransaction5Data, WalletsV1ControllerCreateTransaction5Responses, WalletsV1ControllerCreateTransaction5Errors, WalletsV1ControllerGetDelegatedSigner5Data, WalletsV1ControllerGetDelegatedSigner5Responses, WalletsV1ControllerGetDelegatedSigner5Errors, WalletsV1ControllerCreateDelegatedSigner5Data, WalletsV1ControllerCreateDelegatedSigner5Responses, WalletsV1ControllerCreateDelegatedSigner5Errors, WalletsV1ControllerSubmitSignatureApprovals5Data, WalletsV1ControllerSubmitSignatureApprovals5Responses, WalletsV1ControllerSubmitSignatureApprovals5Errors, WalletsV1ControllerGetSignature5Data, WalletsV1ControllerGetSignature5Responses, WalletsV1ControllerGetSignature5Errors, WalletsV1ControllerGetAllSignatures5Data, WalletsV1ControllerGetAllSignatures5Responses, WalletsV1ControllerGetAllSignatures5Errors, WalletsV1ControllerCreateSignatureRequest5Data, WalletsV1ControllerCreateSignatureRequest5Responses, WalletsV1ControllerCreateSignatureRequest5Errors, BalanceControllerGetBalanceForLocator2Data, BalanceControllerGetBalanceForLocator2Responses, BalanceControllerGetBalanceForLocator2Errors, BalanceControllerFundWallet2Data, BalanceControllerFundWallet2Responses, BalanceControllerFundWallet2Errors, WalletsV1ControllerGetWalletActivity5Data, WalletsV1ControllerGetWalletActivity5Responses, WalletsV1ControllerGetWalletActivity5Errors, WalletsV1ControllerGetWalletByLocator5Data, WalletsV1ControllerGetWalletByLocator5Responses, WalletsV1ControllerGetWalletByLocator5Errors, WalletsV1ControllerCreateWallet5Data, WalletsV1ControllerCreateWallet5Responses, WalletsV1ControllerCreateWallet5Errors, WalletsSendTokenControllerSendMeToken2Data, WalletsSendTokenControllerSendMeToken2Responses, WalletActivityUnstableControllerGetMeWalletActivity2Data, WalletActivityUnstableControllerGetMeWalletActivity2Responses, WalletActivityUnstableControllerGetMeWalletActivity2Errors, WalletsSendTokenControllerSendToken2Data, WalletsSendTokenControllerSendToken2Responses, BalanceUnstableControllerGetBalanceForLocator2Data, BalanceUnstableControllerGetBalanceForLocator2Responses, BalanceUnstableControllerGetBalanceForLocator2Errors, WalletActivityUnstableControllerGetWalletActivity2Data, WalletActivityUnstableControllerGetWalletActivity2Responses, WalletActivityUnstableControllerGetWalletActivity2Errors, WalletsV2025ControllerSubmitMeApprovals2Data, WalletsV2025ControllerSubmitMeApprovals2Responses, WalletsV2025ControllerSubmitMeApprovals2Errors, WalletsV2025ControllerGetMeTransaction2Data, WalletsV2025ControllerGetMeTransaction2Responses, WalletsV2025ControllerGetMeTransaction2Errors, WalletsV2025ControllerGetMeTransactionsWithoutChain2Data, WalletsV2025ControllerGetMeTransactionsWithoutChain2Responses, WalletsV2025ControllerGetMeTransactionsWithoutChain2Errors, WalletsV2025ControllerCreateMeTransaction2Data, WalletsV2025ControllerCreateMeTransaction2Responses, WalletsV2025ControllerCreateMeTransaction2Errors, WalletsSendTokenV2025ControllerSendMeToken2Data, WalletsSendTokenV2025ControllerSendMeToken2Responses, WalletsV2025ControllerGetMeDelegatedSigner2Data, WalletsV2025ControllerGetMeDelegatedSigner2Responses, WalletsV2025ControllerGetMeDelegatedSigner2Errors, WalletsV2025ControllerCreateMeDelegatedSigner2Data, WalletsV2025ControllerCreateMeDelegatedSigner2Responses, WalletsV2025ControllerCreateMeDelegatedSigner2Errors, WalletsV2025ControllerSubmitMeSignatureApprovals2Data, WalletsV2025ControllerSubmitMeSignatureApprovals2Responses, WalletsV2025ControllerSubmitMeSignatureApprovals2Errors, WalletsV2025ControllerGetMeSignature2Data, WalletsV2025ControllerGetMeSignature2Responses, WalletsV2025ControllerGetMeSignature2Errors, WalletsV2025ControllerGetMeSignatures2Data, WalletsV2025ControllerGetMeSignatures2Responses, WalletsV2025ControllerGetMeSignatures2Errors, WalletsV2025ControllerCreateMeSignatureRequest2Data, WalletsV2025ControllerCreateMeSignatureRequest2Responses, WalletsV2025ControllerCreateMeSignatureRequest2Errors, WalletsV2025ControllerGetMeWallet2Data, WalletsV2025ControllerGetMeWallet2Responses, WalletsV2025ControllerCreateMeWallet2Data, WalletsV2025ControllerCreateMeWallet2Responses, WalletsV2025ControllerGetPayoutTransaction2Data, WalletsV2025ControllerGetPayoutTransaction2Responses, WalletsV2025ControllerGetPayoutTransaction2Errors, WalletsSendTokenV2025ControllerCreatePayout2Data, WalletsSendTokenV2025ControllerCreatePayout2Responses, WalletsV2025ControllerSubmitApprovals2Data, WalletsV2025ControllerSubmitApprovals2Responses, WalletsV2025ControllerSubmitApprovals2Errors, WalletsV2025ControllerGetTransaction2Data, WalletsV2025ControllerGetTransaction2Responses, WalletsV2025ControllerGetTransaction2Errors, WalletsV2025ControllerGetTransactionsWithoutChain2Data, WalletsV2025ControllerGetTransactionsWithoutChain2Responses, WalletsV2025ControllerGetTransactionsWithoutChain2Errors, WalletsV2025ControllerCreateTransaction2Data, WalletsV2025ControllerCreateTransaction2Responses, WalletsV2025ControllerCreateTransaction2Errors, WalletsSendTokenV2025ControllerSendToken2Data, WalletsSendTokenV2025ControllerSendToken2Responses, WalletsV2025ControllerGetDelegatedSigner2Data, WalletsV2025ControllerGetDelegatedSigner2Responses, WalletsV2025ControllerGetDelegatedSigner2Errors, WalletsV2025ControllerCreateDelegatedSigner2Data, WalletsV2025ControllerCreateDelegatedSigner2Responses, WalletsV2025ControllerCreateDelegatedSigner2Errors, WalletsV2025ControllerSubmitSignatureApprovals2Data, WalletsV2025ControllerSubmitSignatureApprovals2Responses, WalletsV2025ControllerSubmitSignatureApprovals2Errors, WalletsV2025ControllerGetSignature2Data, WalletsV2025ControllerGetSignature2Responses, WalletsV2025ControllerGetSignature2Errors, WalletsV2025ControllerGetAllSignatures2Data, WalletsV2025ControllerGetAllSignatures2Responses, WalletsV2025ControllerGetAllSignatures2Errors, WalletsV2025ControllerCreateSignatureRequest2Data, WalletsV2025ControllerCreateSignatureRequest2Responses, WalletsV2025ControllerCreateSignatureRequest2Errors, BalanceV20250609ControllerGetBalanceForLocator2Data, BalanceV20250609ControllerGetBalanceForLocator2Responses, BalanceV20250609ControllerGetBalanceForLocator2Errors, WalletsV2025ControllerGetWalletByLocator2Data, WalletsV2025ControllerGetWalletByLocator2Responses, WalletsV2025ControllerGetWalletByLocator2Errors, WalletsV2025ControllerCreateWallet2Data, WalletsV2025ControllerCreateWallet2Responses, WalletsV2025ControllerCreateWallet2Errors, WalletsV1ControllerSubmitMeApprovals4Data, WalletsV1ControllerSubmitMeApprovals4Responses, WalletsV1ControllerSubmitMeApprovals4Errors, WalletsV1ControllerGetMeTransaction4Data, WalletsV1ControllerGetMeTransaction4Responses, WalletsV1ControllerGetMeTransaction4Errors, WalletsV1ControllerGetMeTransactionsWithoutChain4Data, WalletsV1ControllerGetMeTransactionsWithoutChain4Responses, WalletsV1ControllerGetMeTransactionsWithoutChain4Errors, WalletsV1ControllerCreateMeTransaction4Data, WalletsV1ControllerCreateMeTransaction4Responses, WalletsV1ControllerCreateMeTransaction4Errors, WalletsV1ControllerGetMeDelegatedSigner4Data, WalletsV1ControllerGetMeDelegatedSigner4Responses, WalletsV1ControllerGetMeDelegatedSigner4Errors, WalletsV1ControllerCreateMeDelegatedSigner4Data, WalletsV1ControllerCreateMeDelegatedSigner4Responses, WalletsV1ControllerCreateMeDelegatedSigner4Errors, WalletsV1ControllerSubmitMeSignatureApprovals4Data, WalletsV1ControllerSubmitMeSignatureApprovals4Responses, WalletsV1ControllerSubmitMeSignatureApprovals4Errors, WalletsV1ControllerGetMeSignature4Data, WalletsV1ControllerGetMeSignature4Responses, WalletsV1ControllerGetMeSignature4Errors, WalletsV1ControllerCreateMeSignatureRequest4Data, WalletsV1ControllerCreateMeSignatureRequest4Responses, WalletsV1ControllerCreateMeSignatureRequest4Errors, WalletsV1ControllerGetMeWalletActivity4Data, WalletsV1ControllerGetMeWalletActivity4Responses, WalletsV1ControllerGetMeWalletActivity4Errors, WalletsV1ControllerGetMeWallet4Data, WalletsV1ControllerGetMeWallet4Responses, WalletsV1ControllerCreateMeWallet4Data, WalletsV1ControllerCreateMeWallet4Responses, WalletsV1ControllerSubmitApprovals4Data, WalletsV1ControllerSubmitApprovals4Responses, WalletsV1ControllerSubmitApprovals4Errors, WalletsV1ControllerGetTransaction4Data, WalletsV1ControllerGetTransaction4Responses, WalletsV1ControllerGetTransaction4Errors, WalletsV1ControllerGetTransactionsWithoutChain4Data, WalletsV1ControllerGetTransactionsWithoutChain4Responses, WalletsV1ControllerGetTransactionsWithoutChain4Errors, WalletsV1ControllerCreateTransaction4Data, WalletsV1ControllerCreateTransaction4Responses, WalletsV1ControllerCreateTransaction4Errors, WalletsV1ControllerGetDelegatedSigner4Data, WalletsV1ControllerGetDelegatedSigner4Responses, WalletsV1ControllerGetDelegatedSigner4Errors, WalletsV1ControllerCreateDelegatedSigner4Data, WalletsV1ControllerCreateDelegatedSigner4Responses, WalletsV1ControllerCreateDelegatedSigner4Errors, WalletsV1ControllerSubmitSignatureApprovals4Data, WalletsV1ControllerSubmitSignatureApprovals4Responses, WalletsV1ControllerSubmitSignatureApprovals4Errors, WalletsV1ControllerGetSignature4Data, WalletsV1ControllerGetSignature4Responses, WalletsV1ControllerGetSignature4Errors, WalletsV1ControllerGetAllSignatures4Data, WalletsV1ControllerGetAllSignatures4Responses, WalletsV1ControllerGetAllSignatures4Errors, WalletsV1ControllerCreateSignatureRequest4Data, WalletsV1ControllerCreateSignatureRequest4Responses, WalletsV1ControllerCreateSignatureRequest4Errors, WalletsV1ControllerGetWalletActivity4Data, WalletsV1ControllerGetWalletActivity4Responses, WalletsV1ControllerGetWalletActivity4Errors, WalletsV1ControllerGetWalletByLocator4Data, WalletsV1ControllerGetWalletByLocator4Responses, WalletsV1ControllerGetWalletByLocator4Errors, WalletNftControllerGetNftsFromWallet4Data, WalletNftControllerGetNftsFromWallet4Responses, WalletsV1ControllerCreateWallet4Data, WalletsV1ControllerCreateWallet4Responses, WalletsV1ControllerCreateWallet4Errors } from './types.gen.js';
import * as _hey_api_client_fetch from '@hey-api/client-fetch';
import { TDataShape, Options as Options$1, Client } from '@hey-api/client-fetch';

type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options$1<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};
/**
 * Approve Transaction For Authenticated User
 * Submit approval signature for a pending transaction. Required for transactions using external signers.
 *
 * **API scope required**: `wallets:transactions.sign`
 */
declare const walletsV1ControllerSubmitMeApprovals5: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerSubmitMeApprovals5Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerSubmitMeApprovals5Responses, WalletsV1ControllerSubmitMeApprovals5Errors, ThrowOnError>;
/**
 * Get Transaction For Authenticated User
 * Retrieves the current status and details of a specific transaction.
 *
 * **API scope required**: `wallets:transactions.read`
 */
declare const walletsV1ControllerGetMeTransaction5: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerGetMeTransaction5Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerGetMeTransaction5Responses, WalletsV1ControllerGetMeTransaction5Errors, ThrowOnError>;
/**
 * Get Wallet Transactions For Authenticated User
 * Retrieves all transactions associated with the specified wallet.
 *
 * **API scope required**: `wallets:transactions.read`
 */
declare const walletsV1ControllerGetMeTransactionsWithoutChain5: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerGetMeTransactionsWithoutChain5Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerGetMeTransactionsWithoutChain5Responses, WalletsV1ControllerGetMeTransactionsWithoutChain5Errors, ThrowOnError>;
/**
 * Create Transaction For Authenticated User
 * Creates a new transaction for the authenticated user. Transaction will be automatically broadcast once it has all necessary approvals.
 *
 * **API scope required**: `wallets:transactions.create`
 */
declare const walletsV1ControllerCreateMeTransaction5: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerCreateMeTransaction5Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerCreateMeTransaction5Responses, WalletsV1ControllerCreateMeTransaction5Errors, ThrowOnError>;
/**
 * Get Delegated Signer For Authenticated User
 * Retrieve details about a specific delegated signer by its locator.
 *
 * **API scope required**: `wallets.read`
 */
declare const walletsV1ControllerGetMeDelegatedSigner5: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerGetMeDelegatedSigner5Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerGetMeDelegatedSigner5Responses, WalletsV1ControllerGetMeDelegatedSigner5Errors, ThrowOnError>;
/**
 * Register Delegated Signer For Authenticated User
 * Register a delegated key for a smart wallet with optional restrictions around permissions and expiry date.
 *
 * **API scope required**: `wallets.create`
 */
declare const walletsV1ControllerCreateMeDelegatedSigner5: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerCreateMeDelegatedSigner5Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerCreateMeDelegatedSigner5Responses, WalletsV1ControllerCreateMeDelegatedSigner5Errors, ThrowOnError>;
/**
 * Approve Signature For Authenticated User
 * Submit approval for a signature to sign a message or typed data.
 *
 * **API scope required**: `wallets:signatures.create`
 */
declare const walletsV1ControllerSubmitMeSignatureApprovals5: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerSubmitMeSignatureApprovals5Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerSubmitMeSignatureApprovals5Responses, WalletsV1ControllerSubmitMeSignatureApprovals5Errors, ThrowOnError>;
/**
 * Get Signature For Authenticated User
 * Retrieves details about a specific signature by its ID.
 *
 * **API scope required**: `wallets:signatures.read`
 */
declare const walletsV1ControllerGetMeSignature5: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerGetMeSignature5Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerGetMeSignature5Responses, WalletsV1ControllerGetMeSignature5Errors, ThrowOnError>;
/**
 * Create Signature For Authenticated User
 * Creates a new signature for signing messages or typed data.
 *
 * **API scope required**: `wallets:signatures.create`
 */
declare const walletsV1ControllerCreateMeSignatureRequest5: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerCreateMeSignatureRequest5Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerCreateMeSignatureRequest5Responses, WalletsV1ControllerCreateMeSignatureRequest5Errors, ThrowOnError>;
/**
 * Get Wallet Activity For Authenticated User
 * Retrieves activity history for the authenticated user's wallet including transactions and other relevant events.
 *
 * **API scope required**: `wallets.read`
 */
declare const walletsV1ControllerGetMeWalletActivity5: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerGetMeWalletActivity5Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerGetMeWalletActivity5Responses, WalletsV1ControllerGetMeWalletActivity5Errors, ThrowOnError>;
/**
 * Get Wallet For Authenticated User
 * Retrieves a wallet for the authenticated user.
 *
 * **API scope required**: `wallets.read`
 */
declare const walletsV1ControllerGetMeWallet5: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerGetMeWallet5Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerGetMeWallet5Responses, unknown, ThrowOnError>;
/**
 * Create Wallet For Authenticated User
 * Creates a new wallet of specified type for the authenticated user. If called for a user who already has a wallet, returns the existing wallet. Supports both custodial and non-custodial wallet types. Uses client-side API key authentication.
 *
 * **API scope required**: `wallets.create`
 */
declare const walletsV1ControllerCreateMeWallet5: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerCreateMeWallet5Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerCreateMeWallet5Responses, unknown, ThrowOnError>;
/**
 * Approve Transaction
 * Submit approval signature for a pending transaction. Required for transactions using external signers.
 *
 * **API scope required**: `wallets:transactions.sign`
 */
declare const walletsV1ControllerSubmitApprovals5: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerSubmitApprovals5Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerSubmitApprovals5Responses, WalletsV1ControllerSubmitApprovals5Errors, ThrowOnError>;
/**
 * Get Transaction
 * Retrieves the current status and details of a specific transaction.
 *
 * **API scope required**: `wallets:transactions.read`
 */
declare const walletsV1ControllerGetTransaction5: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerGetTransaction5Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerGetTransaction5Responses, WalletsV1ControllerGetTransaction5Errors, ThrowOnError>;
/**
 * Get Wallet Transactions
 * Retrieves all transactions associated with the specified wallet.
 *
 * **API scope required**: `wallets:transactions.read`
 */
declare const walletsV1ControllerGetTransactionsWithoutChain5: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerGetTransactionsWithoutChain5Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerGetTransactionsWithoutChain5Responses, WalletsV1ControllerGetTransactionsWithoutChain5Errors, ThrowOnError>;
/**
 * Create Transaction
 * Creates a new transaction for the specified wallet. Transaction will be automatically broadcast once it has all necessary approvals.
 *
 * **API scope required**: `wallets:transactions.create`
 */
declare const walletsV1ControllerCreateTransaction5: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerCreateTransaction5Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerCreateTransaction5Responses, WalletsV1ControllerCreateTransaction5Errors, ThrowOnError>;
/**
 * Get Delegated Signer
 * Retrieve details about a specific delegated signer by its locator.
 *
 * **API scope required**: `wallets.read`
 */
declare const walletsV1ControllerGetDelegatedSigner5: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerGetDelegatedSigner5Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerGetDelegatedSigner5Responses, WalletsV1ControllerGetDelegatedSigner5Errors, ThrowOnError>;
/**
 * Register Delegated Signer
 * Register a delegated key for a smart wallet with optional restrictions around permissions and expiry date.
 *
 * **API scope required**: `wallets.create`
 */
declare const walletsV1ControllerCreateDelegatedSigner5: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerCreateDelegatedSigner5Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerCreateDelegatedSigner5Responses, WalletsV1ControllerCreateDelegatedSigner5Errors, ThrowOnError>;
/**
 * Approve Signature
 * Submit approval for a signature to sign a message or typed data.
 *
 * **API scope required**: `wallets:signatures.create`
 */
declare const walletsV1ControllerSubmitSignatureApprovals5: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerSubmitSignatureApprovals5Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerSubmitSignatureApprovals5Responses, WalletsV1ControllerSubmitSignatureApprovals5Errors, ThrowOnError>;
/**
 * Get Signature
 * Retrieves details about a specific signature by its ID.
 *
 * **API scope required**: `wallets:signatures.read`
 */
declare const walletsV1ControllerGetSignature5: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerGetSignature5Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerGetSignature5Responses, WalletsV1ControllerGetSignature5Errors, ThrowOnError>;
/**
 * Get All Signatures
 * Retrieves all signatures associated with the specified wallet.
 *
 * **API scope required**: `wallets:signatures.read`
 */
declare const walletsV1ControllerGetAllSignatures5: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerGetAllSignatures5Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerGetAllSignatures5Responses, WalletsV1ControllerGetAllSignatures5Errors, ThrowOnError>;
/**
 * Create Signature
 * Creates a new signature for signing messages or typed data.
 *
 * **API scope required**: `wallets:signatures.create`
 */
declare const walletsV1ControllerCreateSignatureRequest5: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerCreateSignatureRequest5Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerCreateSignatureRequest5Responses, WalletsV1ControllerCreateSignatureRequest5Errors, ThrowOnError>;
/**
 * Get Wallet Balance
 * Get the balance of a wallet for a given chain and currency
 *
 * **API scope required**: `wallets:balance.read`
 */
declare const balanceControllerGetBalanceForLocator2: <ThrowOnError extends boolean = false>(options: Options<BalanceControllerGetBalanceForLocator2Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<BalanceControllerGetBalanceForLocator2Responses, BalanceControllerGetBalanceForLocator2Errors, ThrowOnError>;
/**
 * Fund Wallet
 * Send funds to a wallet.
 *
 * **API scope required**: `wallets.fund`
 */
declare const balanceControllerFundWallet2: <ThrowOnError extends boolean = false>(options: Options<BalanceControllerFundWallet2Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<BalanceControllerFundWallet2Responses, BalanceControllerFundWallet2Errors, ThrowOnError>;
/**
 * Get Wallet Activity
 * Retrieves activity history for the specified wallet including transactions and other relevant events.
 *
 * **API scope required**: `wallets.read`
 */
declare const walletsV1ControllerGetWalletActivity5: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerGetWalletActivity5Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerGetWalletActivity5Responses, WalletsV1ControllerGetWalletActivity5Errors, ThrowOnError>;
/**
 * Get Wallet By Locator
 * Retrieves a wallet by its locator (address or user identifier and wallet type)
 *
 * **API scope required**: `wallets.read`
 */
declare const walletsV1ControllerGetWalletByLocator5: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerGetWalletByLocator5Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerGetWalletByLocator5Responses, WalletsV1ControllerGetWalletByLocator5Errors, ThrowOnError>;
/**
 * Create Wallet
 * Creates a new wallet of specified type. If called with an idempotency key or for a user who already has a wallet, returns existing wallet. When linkedUser is provided, subsequent calls with the same linkedUser will return the existing wallet. Supports both custodial and non-custodial wallet types.
 *
 * **API scope required**: `wallets.create`
 */
declare const walletsV1ControllerCreateWallet5: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerCreateWallet5Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerCreateWallet5Responses, WalletsV1ControllerCreateWallet5Errors, ThrowOnError>;
/**
 * Transfer Token For Authenticated User
 * Sends a token of any type from the authenticated user's wallet to a recipient
 */
declare const walletsSendTokenControllerSendMeToken2: <ThrowOnError extends boolean = false>(options: Options<WalletsSendTokenControllerSendMeToken2Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsSendTokenControllerSendMeToken2Responses, unknown, ThrowOnError>;
/**
 * Get Wallet Activity For Authenticated User (Unstable)
 * Retrieves activity history for the authenticated user's wallet including transactions and other relevant events. This is an unstable API that may change without notice.
 *
 * **API scope required**: `wallets.read`
 */
declare const walletActivityUnstableControllerGetMeWalletActivity2: <ThrowOnError extends boolean = false>(options: Options<WalletActivityUnstableControllerGetMeWalletActivity2Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletActivityUnstableControllerGetMeWalletActivity2Responses, WalletActivityUnstableControllerGetMeWalletActivity2Errors, ThrowOnError>;
/**
 * Transfer Token
 * Sends a token of any type from this wallet to a recipient
 */
declare const walletsSendTokenControllerSendToken2: <ThrowOnError extends boolean = false>(options: Options<WalletsSendTokenControllerSendToken2Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsSendTokenControllerSendToken2Responses, unknown, ThrowOnError>;
/**
 * Get Wallet Balance
 * Get the balance of a wallet for a given chain and currency
 *
 * **API scope required**: `wallets:balance.read`
 */
declare const balanceUnstableControllerGetBalanceForLocator2: <ThrowOnError extends boolean = false>(options: Options<BalanceUnstableControllerGetBalanceForLocator2Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<BalanceUnstableControllerGetBalanceForLocator2Responses, BalanceUnstableControllerGetBalanceForLocator2Errors, ThrowOnError>;
/**
 * Get Wallet Activity (Unstable)
 * Retrieves activity history for the specified wallet including transactions and other relevant events. This is an unstable API that may change without notice.
 *
 * **API scope required**: `wallets.read`
 */
declare const walletActivityUnstableControllerGetWalletActivity2: <ThrowOnError extends boolean = false>(options: Options<WalletActivityUnstableControllerGetWalletActivity2Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletActivityUnstableControllerGetWalletActivity2Responses, WalletActivityUnstableControllerGetWalletActivity2Errors, ThrowOnError>;
/**
 * Approve Transaction For Authenticated User
 * Submit approval signature for a pending transaction. Required for transactions using external signers.
 *
 * **API scope required**: `wallets:transactions.sign`
 */
declare const walletsV2025ControllerSubmitMeApprovals2: <ThrowOnError extends boolean = false>(options: Options<WalletsV2025ControllerSubmitMeApprovals2Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV2025ControllerSubmitMeApprovals2Responses, WalletsV2025ControllerSubmitMeApprovals2Errors, ThrowOnError>;
/**
 * Get Transaction For Authenticated User
 * Retrieves the current status and details of a specific transaction.
 *
 * **API scope required**: `wallets:transactions.read`
 */
declare const walletsV2025ControllerGetMeTransaction2: <ThrowOnError extends boolean = false>(options: Options<WalletsV2025ControllerGetMeTransaction2Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV2025ControllerGetMeTransaction2Responses, WalletsV2025ControllerGetMeTransaction2Errors, ThrowOnError>;
/**
 * Get Wallet Transactions For Authenticated User
 * Retrieves all transactions associated with the specified wallet.
 *
 * **API scope required**: `wallets:transactions.read`
 */
declare const walletsV2025ControllerGetMeTransactionsWithoutChain2: <ThrowOnError extends boolean = false>(options: Options<WalletsV2025ControllerGetMeTransactionsWithoutChain2Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV2025ControllerGetMeTransactionsWithoutChain2Responses, WalletsV2025ControllerGetMeTransactionsWithoutChain2Errors, ThrowOnError>;
/**
 * Create Transaction For Authenticated User
 * Creates a new transaction for the authenticated user. Transaction will be automatically broadcast once it has all necessary approvals.
 *
 * **API scope required**: `wallets:transactions.create`
 */
declare const walletsV2025ControllerCreateMeTransaction2: <ThrowOnError extends boolean = false>(options: Options<WalletsV2025ControllerCreateMeTransaction2Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV2025ControllerCreateMeTransaction2Responses, WalletsV2025ControllerCreateMeTransaction2Errors, ThrowOnError>;
/**
 * Transfer Token For Authenticated User
 * Sends a token of any type from the authenticated user's wallet to a recipient
 */
declare const walletsSendTokenV2025ControllerSendMeToken2: <ThrowOnError extends boolean = false>(options: Options<WalletsSendTokenV2025ControllerSendMeToken2Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsSendTokenV2025ControllerSendMeToken2Responses, unknown, ThrowOnError>;
/**
 * Get Delegated Signer For Authenticated User
 * Retrieve details about a specific delegated signer by its locator.
 *
 * **API scope required**: `wallets.read`
 */
declare const walletsV2025ControllerGetMeDelegatedSigner2: <ThrowOnError extends boolean = false>(options: Options<WalletsV2025ControllerGetMeDelegatedSigner2Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV2025ControllerGetMeDelegatedSigner2Responses, WalletsV2025ControllerGetMeDelegatedSigner2Errors, ThrowOnError>;
/**
 * Create Delegated Signer For Authenticated User
 * Register a delegated key for a smart wallet with optional restrictions around permissions and expiry date.
 *
 * **API scope required**: `wallets.create`
 */
declare const walletsV2025ControllerCreateMeDelegatedSigner2: <ThrowOnError extends boolean = false>(options: Options<WalletsV2025ControllerCreateMeDelegatedSigner2Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV2025ControllerCreateMeDelegatedSigner2Responses, WalletsV2025ControllerCreateMeDelegatedSigner2Errors, ThrowOnError>;
/**
 * Approve Signature For Authenticated User
 * Submit approval for a signature to sign a message or typed data.
 *
 * **API scope required**: `wallets:signatures.create`
 */
declare const walletsV2025ControllerSubmitMeSignatureApprovals2: <ThrowOnError extends boolean = false>(options: Options<WalletsV2025ControllerSubmitMeSignatureApprovals2Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV2025ControllerSubmitMeSignatureApprovals2Responses, WalletsV2025ControllerSubmitMeSignatureApprovals2Errors, ThrowOnError>;
/**
 * Get Signature For Authenticated User
 * Retrieves details about a specific signature by its ID.
 *
 * **API scope required**: `wallets:signatures.read`
 */
declare const walletsV2025ControllerGetMeSignature2: <ThrowOnError extends boolean = false>(options: Options<WalletsV2025ControllerGetMeSignature2Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV2025ControllerGetMeSignature2Responses, WalletsV2025ControllerGetMeSignature2Errors, ThrowOnError>;
/**
 * Get Wallet Signatures For Authenticated User
 * Retrieves all signatures associated with the specified wallet.
 *
 * **API scope required**: `wallets:signatures.read`
 */
declare const walletsV2025ControllerGetMeSignatures2: <ThrowOnError extends boolean = false>(options: Options<WalletsV2025ControllerGetMeSignatures2Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV2025ControllerGetMeSignatures2Responses, WalletsV2025ControllerGetMeSignatures2Errors, ThrowOnError>;
/**
 * Create Signature For Authenticated User
 * Creates a new signature for signing messages or typed data.
 *
 * **API scope required**: `wallets:signatures.create`
 */
declare const walletsV2025ControllerCreateMeSignatureRequest2: <ThrowOnError extends boolean = false>(options: Options<WalletsV2025ControllerCreateMeSignatureRequest2Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV2025ControllerCreateMeSignatureRequest2Responses, WalletsV2025ControllerCreateMeSignatureRequest2Errors, ThrowOnError>;
/**
 * Get Wallet For Authenticated User
 * Retrieves a wallet for the authenticated user.
 *
 * **API scope required**: `wallets.read`
 */
declare const walletsV2025ControllerGetMeWallet2: <ThrowOnError extends boolean = false>(options: Options<WalletsV2025ControllerGetMeWallet2Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV2025ControllerGetMeWallet2Responses, unknown, ThrowOnError>;
/**
 * Create Wallet For Authenticated User
 * Creates a new wallet of specified type for the authenticated user. If called for a user who already has a wallet, returns the existing wallet. Supports both custodial and non-custodial wallet types. Uses client-side API key authentication.
 *
 * **API scope required**: `wallets.create`
 */
declare const walletsV2025ControllerCreateMeWallet2: <ThrowOnError extends boolean = false>(options: Options<WalletsV2025ControllerCreateMeWallet2Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV2025ControllerCreateMeWallet2Responses, unknown, ThrowOnError>;
/**
 * Get Payout Transaction
 * Retrieves the current status and details of a specific payout transaction.
 *
 * **API scope required**: `wallets:transactions.read`
 */
declare const walletsV2025ControllerGetPayoutTransaction2: <ThrowOnError extends boolean = false>(options: Options<WalletsV2025ControllerGetPayoutTransaction2Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV2025ControllerGetPayoutTransaction2Responses, WalletsV2025ControllerGetPayoutTransaction2Errors, ThrowOnError>;
/**
 * Transfer Token
 * Sends a token of any type from this wallet to a recipient
 */
declare const walletsSendTokenV2025ControllerCreatePayout2: <ThrowOnError extends boolean = false>(options: Options<WalletsSendTokenV2025ControllerCreatePayout2Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsSendTokenV2025ControllerCreatePayout2Responses, unknown, ThrowOnError>;
/**
 * Approve Transaction
 * Submit approval signature for a pending transaction. Required for transactions using external signers.
 *
 * **API scope required**: `wallets:transactions.sign`
 */
declare const walletsV2025ControllerSubmitApprovals2: <ThrowOnError extends boolean = false>(options: Options<WalletsV2025ControllerSubmitApprovals2Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV2025ControllerSubmitApprovals2Responses, WalletsV2025ControllerSubmitApprovals2Errors, ThrowOnError>;
/**
 * Get Transaction
 * Retrieves the current status and details of a specific transaction.
 *
 * **API scope required**: `wallets:transactions.read`
 */
declare const walletsV2025ControllerGetTransaction2: <ThrowOnError extends boolean = false>(options: Options<WalletsV2025ControllerGetTransaction2Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV2025ControllerGetTransaction2Responses, WalletsV2025ControllerGetTransaction2Errors, ThrowOnError>;
/**
 * Get Wallet Transactions
 * Retrieves all transactions associated with the specified wallet.
 *
 * **API scope required**: `wallets:transactions.read`
 */
declare const walletsV2025ControllerGetTransactionsWithoutChain2: <ThrowOnError extends boolean = false>(options: Options<WalletsV2025ControllerGetTransactionsWithoutChain2Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV2025ControllerGetTransactionsWithoutChain2Responses, WalletsV2025ControllerGetTransactionsWithoutChain2Errors, ThrowOnError>;
/**
 * Create Transaction
 * Creates a new transaction for the specified wallet. Transaction will be automatically broadcast once it has all necessary approvals.
 *
 * **API scope required**: `wallets:transactions.create`
 */
declare const walletsV2025ControllerCreateTransaction2: <ThrowOnError extends boolean = false>(options: Options<WalletsV2025ControllerCreateTransaction2Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV2025ControllerCreateTransaction2Responses, WalletsV2025ControllerCreateTransaction2Errors, ThrowOnError>;
/**
 * Transfer Token
 * Sends a token of any type from this wallet to a recipient
 */
declare const walletsSendTokenV2025ControllerSendToken2: <ThrowOnError extends boolean = false>(options: Options<WalletsSendTokenV2025ControllerSendToken2Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsSendTokenV2025ControllerSendToken2Responses, unknown, ThrowOnError>;
/**
 * Get Delegated Signer
 * Retrieve details about a specific delegated signer by its locator.
 *
 * **API scope required**: `wallets.read`
 */
declare const walletsV2025ControllerGetDelegatedSigner2: <ThrowOnError extends boolean = false>(options: Options<WalletsV2025ControllerGetDelegatedSigner2Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV2025ControllerGetDelegatedSigner2Responses, WalletsV2025ControllerGetDelegatedSigner2Errors, ThrowOnError>;
/**
 * Create Delegated Signer
 * Create a delegated signer for a smart wallet with optional restrictions around permissions and expiry date.
 *
 * **API scope required**: `wallets.create`
 */
declare const walletsV2025ControllerCreateDelegatedSigner2: <ThrowOnError extends boolean = false>(options: Options<WalletsV2025ControllerCreateDelegatedSigner2Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV2025ControllerCreateDelegatedSigner2Responses, WalletsV2025ControllerCreateDelegatedSigner2Errors, ThrowOnError>;
/**
 * Approve Signature
 * Submit approval for a signature to sign a message or typed data.
 *
 * **API scope required**: `wallets:signatures.create`
 */
declare const walletsV2025ControllerSubmitSignatureApprovals2: <ThrowOnError extends boolean = false>(options: Options<WalletsV2025ControllerSubmitSignatureApprovals2Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV2025ControllerSubmitSignatureApprovals2Responses, WalletsV2025ControllerSubmitSignatureApprovals2Errors, ThrowOnError>;
/**
 * Get Signature
 * Retrieves details about a specific signature by its ID.
 *
 * **API scope required**: `wallets:signatures.read`
 */
declare const walletsV2025ControllerGetSignature2: <ThrowOnError extends boolean = false>(options: Options<WalletsV2025ControllerGetSignature2Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV2025ControllerGetSignature2Responses, WalletsV2025ControllerGetSignature2Errors, ThrowOnError>;
/**
 * Get All Signatures
 * Retrieves all signatures associated with the specified wallet.
 *
 * **API scope required**: `wallets:signatures.read`
 */
declare const walletsV2025ControllerGetAllSignatures2: <ThrowOnError extends boolean = false>(options: Options<WalletsV2025ControllerGetAllSignatures2Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV2025ControllerGetAllSignatures2Responses, WalletsV2025ControllerGetAllSignatures2Errors, ThrowOnError>;
/**
 * Create Signature
 * Creates a new signature for signing messages or typed data.
 *
 * **API scope required**: `wallets:signatures.create`
 */
declare const walletsV2025ControllerCreateSignatureRequest2: <ThrowOnError extends boolean = false>(options: Options<WalletsV2025ControllerCreateSignatureRequest2Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV2025ControllerCreateSignatureRequest2Responses, WalletsV2025ControllerCreateSignatureRequest2Errors, ThrowOnError>;
/**
 * Get Wallet Balance
 * Get the balance of a wallet for a given chain and currency
 *
 * **API scope required**: `wallets:balance.read`
 */
declare const balanceV20250609ControllerGetBalanceForLocator2: <ThrowOnError extends boolean = false>(options: Options<BalanceV20250609ControllerGetBalanceForLocator2Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<BalanceV20250609ControllerGetBalanceForLocator2Responses, BalanceV20250609ControllerGetBalanceForLocator2Errors, ThrowOnError>;
/**
 * Get Wallet By Locator
 * Retrieves a wallet by its locator (address or user identifier and wallet type)
 *
 * **API scope required**: `wallets.read`
 */
declare const walletsV2025ControllerGetWalletByLocator2: <ThrowOnError extends boolean = false>(options: Options<WalletsV2025ControllerGetWalletByLocator2Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV2025ControllerGetWalletByLocator2Responses, WalletsV2025ControllerGetWalletByLocator2Errors, ThrowOnError>;
/**
 * Create Wallet
 * Creates a new wallet of specified type. If called with an idempotency key or for a user who already has a wallet, returns existing wallet. When owner is provided, subsequent calls with the same owner will return the existing wallet. Supports both custodial and non-custodial wallet types.
 *
 * **API scope required**: `wallets.create`
 */
declare const walletsV2025ControllerCreateWallet2: <ThrowOnError extends boolean = false>(options: Options<WalletsV2025ControllerCreateWallet2Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV2025ControllerCreateWallet2Responses, WalletsV2025ControllerCreateWallet2Errors, ThrowOnError>;
/**
 * Approve Transaction For Authenticated User
 * Submit approval signature for a pending transaction. Required for transactions using external signers.
 *
 * **API scope required**: `wallets:transactions.sign`
 */
declare const walletsV1ControllerSubmitMeApprovals4: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerSubmitMeApprovals4Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerSubmitMeApprovals4Responses, WalletsV1ControllerSubmitMeApprovals4Errors, ThrowOnError>;
/**
 * Get Transaction For Authenticated User
 * Retrieves the current status and details of a specific transaction.
 *
 * **API scope required**: `wallets:transactions.read`
 */
declare const walletsV1ControllerGetMeTransaction4: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerGetMeTransaction4Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerGetMeTransaction4Responses, WalletsV1ControllerGetMeTransaction4Errors, ThrowOnError>;
/**
 * Get Wallet Transactions For Authenticated User
 * Retrieves all transactions associated with the specified wallet.
 *
 * **API scope required**: `wallets:transactions.read`
 */
declare const walletsV1ControllerGetMeTransactionsWithoutChain4: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerGetMeTransactionsWithoutChain4Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerGetMeTransactionsWithoutChain4Responses, WalletsV1ControllerGetMeTransactionsWithoutChain4Errors, ThrowOnError>;
/**
 * Create Transaction For Authenticated User
 * Creates a new transaction for the authenticated user. Transaction will be automatically broadcast once it has all necessary approvals.
 *
 * **API scope required**: `wallets:transactions.create`
 */
declare const walletsV1ControllerCreateMeTransaction4: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerCreateMeTransaction4Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerCreateMeTransaction4Responses, WalletsV1ControllerCreateMeTransaction4Errors, ThrowOnError>;
/**
 * Get Delegated Signer For Authenticated User
 * Retrieve details about a specific delegated signer by its locator.
 *
 * **API scope required**: `wallets.read`
 */
declare const walletsV1ControllerGetMeDelegatedSigner4: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerGetMeDelegatedSigner4Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerGetMeDelegatedSigner4Responses, WalletsV1ControllerGetMeDelegatedSigner4Errors, ThrowOnError>;
/**
 * Register Delegated Signer For Authenticated User
 * Register a delegated key for a smart wallet with optional restrictions around permissions and expiry date.
 *
 * **API scope required**: `wallets.create`
 */
declare const walletsV1ControllerCreateMeDelegatedSigner4: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerCreateMeDelegatedSigner4Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerCreateMeDelegatedSigner4Responses, WalletsV1ControllerCreateMeDelegatedSigner4Errors, ThrowOnError>;
/**
 * Approve Signature For Authenticated User
 * Submit approval for a signature to sign a message or typed data.
 *
 * **API scope required**: `wallets:signatures.create`
 */
declare const walletsV1ControllerSubmitMeSignatureApprovals4: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerSubmitMeSignatureApprovals4Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerSubmitMeSignatureApprovals4Responses, WalletsV1ControllerSubmitMeSignatureApprovals4Errors, ThrowOnError>;
/**
 * Get Signature For Authenticated User
 * Retrieves details about a specific signature by its ID.
 *
 * **API scope required**: `wallets:signatures.read`
 */
declare const walletsV1ControllerGetMeSignature4: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerGetMeSignature4Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerGetMeSignature4Responses, WalletsV1ControllerGetMeSignature4Errors, ThrowOnError>;
/**
 * Create Signature For Authenticated User
 * Creates a new signature for signing messages or typed data.
 *
 * **API scope required**: `wallets:signatures.create`
 */
declare const walletsV1ControllerCreateMeSignatureRequest4: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerCreateMeSignatureRequest4Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerCreateMeSignatureRequest4Responses, WalletsV1ControllerCreateMeSignatureRequest4Errors, ThrowOnError>;
/**
 * Get Wallet Activity For Authenticated User
 * Retrieves activity history for the authenticated user's wallet including transactions and other relevant events.
 *
 * **API scope required**: `wallets.read`
 */
declare const walletsV1ControllerGetMeWalletActivity4: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerGetMeWalletActivity4Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerGetMeWalletActivity4Responses, WalletsV1ControllerGetMeWalletActivity4Errors, ThrowOnError>;
/**
 * Get Wallet For Authenticated User
 * Retrieves a wallet for the authenticated user.
 *
 * **API scope required**: `wallets.read`
 */
declare const walletsV1ControllerGetMeWallet4: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerGetMeWallet4Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerGetMeWallet4Responses, unknown, ThrowOnError>;
/**
 * Create Wallet For Authenticated User
 * Creates a new wallet of specified type for the authenticated user. If called for a user who already has a wallet, returns the existing wallet. Supports both custodial and non-custodial wallet types. Uses client-side API key authentication.
 *
 * **API scope required**: `wallets.create`
 */
declare const walletsV1ControllerCreateMeWallet4: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerCreateMeWallet4Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerCreateMeWallet4Responses, unknown, ThrowOnError>;
/**
 * Approve Transaction
 * Submit approval signature for a pending transaction. Required for transactions using external signers.
 *
 * **API scope required**: `wallets:transactions.sign`
 */
declare const walletsV1ControllerSubmitApprovals4: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerSubmitApprovals4Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerSubmitApprovals4Responses, WalletsV1ControllerSubmitApprovals4Errors, ThrowOnError>;
/**
 * Get Transaction
 * Retrieves the current status and details of a specific transaction.
 *
 * **API scope required**: `wallets:transactions.read`
 */
declare const walletsV1ControllerGetTransaction4: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerGetTransaction4Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerGetTransaction4Responses, WalletsV1ControllerGetTransaction4Errors, ThrowOnError>;
/**
 * Get Wallet Transactions
 * Retrieves all transactions associated with the specified wallet.
 *
 * **API scope required**: `wallets:transactions.read`
 */
declare const walletsV1ControllerGetTransactionsWithoutChain4: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerGetTransactionsWithoutChain4Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerGetTransactionsWithoutChain4Responses, WalletsV1ControllerGetTransactionsWithoutChain4Errors, ThrowOnError>;
/**
 * Create Transaction
 * Creates a new transaction for the specified wallet. Transaction will be automatically broadcast once it has all necessary approvals.
 *
 * **API scope required**: `wallets:transactions.create`
 */
declare const walletsV1ControllerCreateTransaction4: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerCreateTransaction4Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerCreateTransaction4Responses, WalletsV1ControllerCreateTransaction4Errors, ThrowOnError>;
/**
 * Get Delegated Signer
 * Retrieve details about a specific delegated signer by its locator.
 *
 * **API scope required**: `wallets.read`
 */
declare const walletsV1ControllerGetDelegatedSigner4: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerGetDelegatedSigner4Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerGetDelegatedSigner4Responses, WalletsV1ControllerGetDelegatedSigner4Errors, ThrowOnError>;
/**
 * Register Delegated Signer
 * Register a delegated key for a smart wallet with optional restrictions around permissions and expiry date.
 *
 * **API scope required**: `wallets.create`
 */
declare const walletsV1ControllerCreateDelegatedSigner4: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerCreateDelegatedSigner4Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerCreateDelegatedSigner4Responses, WalletsV1ControllerCreateDelegatedSigner4Errors, ThrowOnError>;
/**
 * Approve Signature
 * Submit approval for a signature to sign a message or typed data.
 *
 * **API scope required**: `wallets:signatures.create`
 */
declare const walletsV1ControllerSubmitSignatureApprovals4: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerSubmitSignatureApprovals4Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerSubmitSignatureApprovals4Responses, WalletsV1ControllerSubmitSignatureApprovals4Errors, ThrowOnError>;
/**
 * Get Signature
 * Retrieves details about a specific signature by its ID.
 *
 * **API scope required**: `wallets:signatures.read`
 */
declare const walletsV1ControllerGetSignature4: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerGetSignature4Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerGetSignature4Responses, WalletsV1ControllerGetSignature4Errors, ThrowOnError>;
/**
 * Get All Signatures
 * Retrieves all signatures associated with the specified wallet.
 *
 * **API scope required**: `wallets:signatures.read`
 */
declare const walletsV1ControllerGetAllSignatures4: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerGetAllSignatures4Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerGetAllSignatures4Responses, WalletsV1ControllerGetAllSignatures4Errors, ThrowOnError>;
/**
 * Create Signature
 * Creates a new signature for signing messages or typed data.
 *
 * **API scope required**: `wallets:signatures.create`
 */
declare const walletsV1ControllerCreateSignatureRequest4: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerCreateSignatureRequest4Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerCreateSignatureRequest4Responses, WalletsV1ControllerCreateSignatureRequest4Errors, ThrowOnError>;
/**
 * Get Wallet Activity
 * Retrieves activity history for the specified wallet including transactions and other relevant events.
 *
 * **API scope required**: `wallets.read`
 */
declare const walletsV1ControllerGetWalletActivity4: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerGetWalletActivity4Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerGetWalletActivity4Responses, WalletsV1ControllerGetWalletActivity4Errors, ThrowOnError>;
/**
 * Get Wallet By Locator
 * Retrieves a wallet by its locator (address or user identifier and wallet type)
 *
 * **API scope required**: `wallets.read`
 */
declare const walletsV1ControllerGetWalletByLocator4: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerGetWalletByLocator4Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerGetWalletByLocator4Responses, WalletsV1ControllerGetWalletByLocator4Errors, ThrowOnError>;
/**
 * Get NFTs from Wallet
 * Retrieves NFTs from a wallet.
 *
 * **API scope required**: `wallets:nfts.read`
 */
declare const walletNftControllerGetNftsFromWallet4: <ThrowOnError extends boolean = false>(options: Options<WalletNftControllerGetNftsFromWallet4Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletNftControllerGetNftsFromWallet4Responses, unknown, ThrowOnError>;
/**
 * Create Wallet
 * Creates a new wallet of specified type. If called with an idempotency key or for a user who already has a wallet, returns existing wallet. When linkedUser is provided, subsequent calls with the same linkedUser will return the existing wallet. Supports both custodial and non-custodial wallet types.
 *
 * **API scope required**: `wallets.create`
 */
declare const walletsV1ControllerCreateWallet4: <ThrowOnError extends boolean = false>(options: Options<WalletsV1ControllerCreateWallet4Data, ThrowOnError>) => _hey_api_client_fetch.RequestResult<WalletsV1ControllerCreateWallet4Responses, WalletsV1ControllerCreateWallet4Errors, ThrowOnError>;

export { type Options, balanceControllerFundWallet2, balanceControllerGetBalanceForLocator2, balanceUnstableControllerGetBalanceForLocator2, balanceV20250609ControllerGetBalanceForLocator2, walletActivityUnstableControllerGetMeWalletActivity2, walletActivityUnstableControllerGetWalletActivity2, walletNftControllerGetNftsFromWallet4, walletsSendTokenControllerSendMeToken2, walletsSendTokenControllerSendToken2, walletsSendTokenV2025ControllerCreatePayout2, walletsSendTokenV2025ControllerSendMeToken2, walletsSendTokenV2025ControllerSendToken2, walletsV1ControllerCreateDelegatedSigner4, walletsV1ControllerCreateDelegatedSigner5, walletsV1ControllerCreateMeDelegatedSigner4, walletsV1ControllerCreateMeDelegatedSigner5, walletsV1ControllerCreateMeSignatureRequest4, walletsV1ControllerCreateMeSignatureRequest5, walletsV1ControllerCreateMeTransaction4, walletsV1ControllerCreateMeTransaction5, walletsV1ControllerCreateMeWallet4, walletsV1ControllerCreateMeWallet5, walletsV1ControllerCreateSignatureRequest4, walletsV1ControllerCreateSignatureRequest5, walletsV1ControllerCreateTransaction4, walletsV1ControllerCreateTransaction5, walletsV1ControllerCreateWallet4, walletsV1ControllerCreateWallet5, walletsV1ControllerGetAllSignatures4, walletsV1ControllerGetAllSignatures5, walletsV1ControllerGetDelegatedSigner4, walletsV1ControllerGetDelegatedSigner5, walletsV1ControllerGetMeDelegatedSigner4, walletsV1ControllerGetMeDelegatedSigner5, walletsV1ControllerGetMeSignature4, walletsV1ControllerGetMeSignature5, walletsV1ControllerGetMeTransaction4, walletsV1ControllerGetMeTransaction5, walletsV1ControllerGetMeTransactionsWithoutChain4, walletsV1ControllerGetMeTransactionsWithoutChain5, walletsV1ControllerGetMeWallet4, walletsV1ControllerGetMeWallet5, walletsV1ControllerGetMeWalletActivity4, walletsV1ControllerGetMeWalletActivity5, walletsV1ControllerGetSignature4, walletsV1ControllerGetSignature5, walletsV1ControllerGetTransaction4, walletsV1ControllerGetTransaction5, walletsV1ControllerGetTransactionsWithoutChain4, walletsV1ControllerGetTransactionsWithoutChain5, walletsV1ControllerGetWalletActivity4, walletsV1ControllerGetWalletActivity5, walletsV1ControllerGetWalletByLocator4, walletsV1ControllerGetWalletByLocator5, walletsV1ControllerSubmitApprovals4, walletsV1ControllerSubmitApprovals5, walletsV1ControllerSubmitMeApprovals4, walletsV1ControllerSubmitMeApprovals5, walletsV1ControllerSubmitMeSignatureApprovals4, walletsV1ControllerSubmitMeSignatureApprovals5, walletsV1ControllerSubmitSignatureApprovals4, walletsV1ControllerSubmitSignatureApprovals5, walletsV2025ControllerCreateDelegatedSigner2, walletsV2025ControllerCreateMeDelegatedSigner2, walletsV2025ControllerCreateMeSignatureRequest2, walletsV2025ControllerCreateMeTransaction2, walletsV2025ControllerCreateMeWallet2, walletsV2025ControllerCreateSignatureRequest2, walletsV2025ControllerCreateTransaction2, walletsV2025ControllerCreateWallet2, walletsV2025ControllerGetAllSignatures2, walletsV2025ControllerGetDelegatedSigner2, walletsV2025ControllerGetMeDelegatedSigner2, walletsV2025ControllerGetMeSignature2, walletsV2025ControllerGetMeSignatures2, walletsV2025ControllerGetMeTransaction2, walletsV2025ControllerGetMeTransactionsWithoutChain2, walletsV2025ControllerGetMeWallet2, walletsV2025ControllerGetPayoutTransaction2, walletsV2025ControllerGetSignature2, walletsV2025ControllerGetTransaction2, walletsV2025ControllerGetTransactionsWithoutChain2, walletsV2025ControllerGetWalletByLocator2, walletsV2025ControllerSubmitApprovals2, walletsV2025ControllerSubmitMeApprovals2, walletsV2025ControllerSubmitMeSignatureApprovals2, walletsV2025ControllerSubmitSignatureApprovals2 };
