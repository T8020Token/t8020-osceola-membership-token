import * as _crossmint_common_sdk_base from '@crossmint/common-sdk-base';
import { CrossmintApiClient, Crossmint } from '@crossmint/common-sdk-base';
import { CreateWalletParams, CreateWalletResponse, WalletLocator, GetWalletResponse, CreateTransactionParams, CreateTransactionResponse, ApproveTransactionParams, ApproveTransactionResponse, GetTransactionResponse, CreateSignatureParams, CreateSignatureResponse, ApproveSignatureParams, ApproveSignatureResponse, GetSignatureResponse, GetTransactionsResponse, GetNftsResponse, GetActivityResponse, GetBalanceResponse, RegisterSignerParams, RegisterSignerResponse, GetSignerResponse, SendParams, SendResponse } from './types.js';
import { Chain } from '../chains/chains.js';
import 'viem';
import './gen/types.gen.js';

declare class ApiClient extends CrossmintApiClient {
    private apiPrefix;
    private legacyApiPrefix;
    constructor(crossmint: Crossmint);
    createWallet(params: CreateWalletParams): Promise<CreateWalletResponse>;
    getWallet(locator: WalletLocator): Promise<GetWalletResponse>;
    createTransaction(walletLocator: WalletLocator, params: CreateTransactionParams): Promise<CreateTransactionResponse>;
    approveTransaction(walletLocator: WalletLocator, transactionId: string, params: ApproveTransactionParams): Promise<ApproveTransactionResponse>;
    getTransaction(walletLocator: WalletLocator, transactionId: string): Promise<GetTransactionResponse>;
    createSignature(walletLocator: WalletLocator, params: CreateSignatureParams): Promise<CreateSignatureResponse>;
    approveSignature(walletLocator: WalletLocator, signatureId: string, params: ApproveSignatureParams): Promise<ApproveSignatureResponse>;
    getSignature(walletLocator: WalletLocator, signatureId: string): Promise<GetSignatureResponse>;
    getTransactions(walletLocator: WalletLocator): Promise<GetTransactionsResponse>;
    experimental_getNfts(params: {
        address: string;
        perPage: number;
        page: number;
        chain: string;
    }): Promise<GetNftsResponse>;
    experimental_activity(walletLocator: WalletLocator, params: {
        chain: Chain;
    }): Promise<GetActivityResponse>;
    getBalance(walletLocator: WalletLocator, params: {
        chains: Chain[];
        tokens: string[];
    }): Promise<GetBalanceResponse>;
    registerSigner(walletLocator: WalletLocator, params: RegisterSignerParams): Promise<RegisterSignerResponse>;
    getSigner(walletLocator: WalletLocator, signer: string): Promise<GetSignerResponse>;
    send(walletLocator: WalletLocator, tokenLocator: string, params: SendParams): Promise<SendResponse>;
    get isServerSide(): boolean;
    get environment(): _crossmint_common_sdk_base.APIKeyEnvironmentPrefix;
    private get headers();
}

export { ApiClient };
