import { CrossmintSDKError } from '@crossmint/common-sdk-base';

declare class InvalidApiKeyError extends CrossmintSDKError {
    constructor(message: string, details?: string);
}
declare class InvalidEnvironmentError extends CrossmintSDKError {
    constructor(message: string, details?: string);
}
declare class WalletTypeNotSupportedError extends CrossmintSDKError {
    constructor(message: string, details?: string);
}
declare class WalletNotAvailableError extends CrossmintSDKError {
    constructor(message: string, details?: string);
}
declare class InvalidWalletConfigError extends CrossmintSDKError {
    constructor(message: string, details?: string);
}
declare class WalletCreationError extends CrossmintSDKError {
    constructor(message: string, details?: string);
}
declare class WalletTypeMismatchError extends CrossmintSDKError {
    constructor(message: string, details?: string);
}
declare class SignerTypeMismatchError extends CrossmintSDKError {
    constructor(message: string, details?: string);
}
declare class InvalidSignerError extends CrossmintSDKError {
    constructor(message: string, details?: string);
}
declare class InvalidMessageFormatError extends CrossmintSDKError {
    constructor(message: string, details?: string);
}
declare class InvalidTypedDataError extends CrossmintSDKError {
    constructor(message: string, details?: string);
}
declare class SignatureNotFoundError extends CrossmintSDKError {
    constructor(message: string, details?: string);
}
declare class SigningFailedError extends CrossmintSDKError {
    constructor(message: string, details?: string);
}
declare class MessageSigningNotSupportedError extends CrossmintSDKError {
    constructor(message: string, details?: string);
}
declare class SignatureNotCreatedError extends CrossmintSDKError {
    constructor(message: string, details?: string);
}
declare class SignatureNotAvailableError extends CrossmintSDKError {
    constructor(message: string, details?: string);
}
declare class SignatureFailedError extends CrossmintSDKError {
    constructor(message: string, details?: string);
}
declare class TransactionNotCreatedError extends CrossmintSDKError {
    constructor(message: string, details?: string);
}
declare class TransactionNotAvailableError extends CrossmintSDKError {
    constructor(message: string, details?: string);
}
declare class TransactionConfirmationTimeoutError extends CrossmintSDKError {
    constructor(message: string, details?: string);
}
declare class TransactionSendingFailedError extends CrossmintSDKError {
    constructor(message: string, details?: string);
}
declare class TransactionAwaitingApprovalError extends CrossmintSDKError {
    constructor(message: string, details?: string);
}
declare class TransactionHashNotFoundError extends CrossmintSDKError {
    constructor(message: string, details?: string);
}
declare class TransactionFailedError extends CrossmintSDKError {
    constructor(message: string, details?: string);
}
declare class PendingApprovalsError extends CrossmintSDKError {
    constructor(message: string, details?: string);
}
type WalletError = InvalidApiKeyError | InvalidEnvironmentError | WalletTypeNotSupportedError | WalletNotAvailableError | InvalidWalletConfigError | WalletCreationError | WalletTypeMismatchError | SignerTypeMismatchError | InvalidSignerError | InvalidMessageFormatError | InvalidTypedDataError | SignatureNotFoundError | SigningFailedError | MessageSigningNotSupportedError | SignatureNotCreatedError | SignatureNotAvailableError | SignatureFailedError | TransactionNotCreatedError | TransactionNotAvailableError | TransactionConfirmationTimeoutError | TransactionSendingFailedError | TransactionAwaitingApprovalError | TransactionHashNotFoundError | TransactionFailedError | PendingApprovalsError;

export { InvalidApiKeyError, InvalidEnvironmentError, InvalidMessageFormatError, InvalidSignerError, InvalidTypedDataError, InvalidWalletConfigError, MessageSigningNotSupportedError, PendingApprovalsError, SignatureFailedError, SignatureNotAvailableError, SignatureNotCreatedError, SignatureNotFoundError, SignerTypeMismatchError, SigningFailedError, TransactionAwaitingApprovalError, TransactionConfirmationTimeoutError, TransactionFailedError, TransactionHashNotFoundError, TransactionNotAvailableError, TransactionNotCreatedError, TransactionSendingFailedError, WalletCreationError, type WalletError, WalletNotAvailableError, WalletTypeMismatchError, WalletTypeNotSupportedError };
