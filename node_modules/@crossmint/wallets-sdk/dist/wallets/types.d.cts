import { VersionedTransaction, Keypair } from '@solana/web3.js';
import { HandshakeParent } from '@crossmint/client-sdk-window';
import { signerOutboundEvents, signerInboundEvents } from '@crossmint/client-signers';
import { TypedDataDefinition, TypedData } from 'viem';
import { Abi } from 'abitype';
import { CreateTransactionSuccessResponse } from '../api/types.cjs';
export { Activity } from '../api/types.cjs';
import { Chain, StellarChain, EVMSmartWalletChain } from '../chains/chains.cjs';
import { SignerConfigForChain, BaseSignResult, PasskeySignResult, Signer } from '../signers/types.cjs';
import '../api/gen/types.gen.cjs';
import 'ox';
import '@crossmint/common-sdk-base';

type PrepareOnly<T extends boolean = boolean> = {
    experimental_prepareOnly: T;
};
type TransactionInputOptions = PrepareOnly & {
    experimental_signer?: string;
};
type SignatureInputOptions = PrepareOnly;
type SignMessageInput = {
    message: string;
    options?: SignatureInputOptions;
};
type SignTypedDataInput = TypedDataDefinition<TypedData, string> & {
    chain: EVMSmartWalletChain;
    options?: SignatureInputOptions;
};
type ApproveResult<T extends ApproveParams> = T extends {
    transactionId: string;
} ? Transaction<false> : T extends {
    signatureId: string;
} ? Signature<false> : Error;
type EVMTransactionInputBase = {
    options?: TransactionInputOptions;
};
type EVMTransactionInput = EVMTransactionInputBase & ({
    to: string;
    functionName?: string;
    args?: unknown[];
    value?: bigint;
    abi?: Abi;
    data?: `0x${string}`;
} | {
    transaction: string;
});
type StellarTransactionInput = ({
    contractId: string;
    method: string;
    memo?: string;
    args: Record<string, any>;
} | {
    transaction: string;
    contractId: string;
}) & {
    options?: TransactionInputOptions;
};
type SolanaTransactionInput = {
    transaction: VersionedTransaction;
    additionalSigners?: Keypair[];
    options?: TransactionInputOptions;
};
type FormattedEVMTransaction = {
    to: string;
    value: string;
    data: string;
} | {
    transaction: string;
};
type DelegatedSigner = {
    signer: string;
};
type PendingApproval = NonNullable<NonNullable<CreateTransactionSuccessResponse["approvals"]>["pending"]>[number];
type Callbacks = {
    onWalletCreationStart?: () => Promise<void>;
    onTransactionStart?: () => Promise<void>;
};
type StellarWalletPlugin = string;
type WalletPlugin<C extends Chain> = C extends StellarChain ? StellarWalletPlugin : never;
type WalletOptions = {
    experimental_callbacks?: Callbacks;
    clientTEEConnection?: HandshakeParent<typeof signerOutboundEvents, typeof signerInboundEvents>;
};
type WalletArgsFor<C extends Chain> = {
    chain: C;
    signer: SignerConfigForChain<C>;
    owner?: string;
    plugins?: WalletPlugin<C>[];
    options?: WalletOptions;
    delegatedSigners?: Array<DelegatedSigner>;
};
type TokenBalance = {
    symbol: "sol" | "eth" | "usdc" | string;
    name: string;
    amount: string;
    contractAddress?: string;
    decimals?: number;
    rawAmount?: string;
};
type Balances = {
    nativeToken: TokenBalance;
    usdc: TokenBalance;
    tokens: TokenBalance[];
};
type UserLocator = {
    email: string;
} | {
    x: string;
} | {
    twitter: string;
} | {
    phone: string;
} | {
    userId: string;
};
type Transaction<TPrepareOnly extends boolean = false> = TPrepareOnly extends true ? {
    hash?: string;
    explorerLink?: string;
    transactionId: string;
} : {
    hash: string;
    explorerLink: string;
    transactionId: string;
};
type Signature<TPrepareOnly extends boolean = false> = TPrepareOnly extends true ? {
    signature?: string;
    signatureId: string;
} : {
    signature: string;
    signatureId: string;
};
type ApproveOptions = {
    experimental_approval?: Approval;
    additionalSigners?: Signer[];
};
type ApproveParams = {
    transactionId?: string;
    signatureId?: string;
    options?: ApproveOptions;
};
type Approval = (BaseSignResult | PasskeySignResult) & {
    signer: string;
};

export type { Approval, ApproveOptions, ApproveParams, ApproveResult, Balances, Callbacks, DelegatedSigner, EVMTransactionInput, FormattedEVMTransaction, PendingApproval, PrepareOnly, SignMessageInput, SignTypedDataInput, Signature, SignatureInputOptions, SolanaTransactionInput, StellarTransactionInput, StellarWalletPlugin, TokenBalance, Transaction, TransactionInputOptions, UserLocator, WalletArgsFor, WalletOptions, WalletPlugin };
