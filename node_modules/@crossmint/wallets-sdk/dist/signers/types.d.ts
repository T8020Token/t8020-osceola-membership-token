import { WebAuthnP256 } from 'ox';
import { HandshakeParent } from '@crossmint/client-sdk-window';
import { signerOutboundEvents, signerInboundEvents } from '@crossmint/client-signers';
import { SolanaExternalWalletSignerConfig, StellarExternalWalletSignerConfig, EvmExternalWalletSignerConfig, Crossmint } from '@crossmint/common-sdk-base';
export { EvmExternalWalletSignerConfig, GenericEIP1193Provider, SolanaExternalWalletSignerConfig, StellarExternalWalletSignerConfig } from '@crossmint/common-sdk-base';
import { Chain, SolanaChain, StellarChain } from '../chains/chains.js';
import 'viem';

declare class AuthRejectedError extends Error {
    constructor();
}
type EmailSignerConfig = {
    type: "email";
    email?: string;
    onAuthRequired?: (needsAuth: boolean, sendEmailWithOtp: () => Promise<void>, verifyOtp: (otp: string) => Promise<void>, reject: () => void) => Promise<void>;
};
type PhoneSignerConfig = {
    type: "phone";
    phone?: string;
    onAuthRequired?: (needsAuth: boolean, sendEmailWithOtp: () => Promise<void>, verifyOtp: (otp: string) => Promise<void>, reject: () => void) => Promise<void>;
};
type NonCustodialSignerType = PhoneSignerConfig["type"] | EmailSignerConfig["type"];
type ExternalWalletSignerConfigForChain<C extends Chain> = C extends SolanaChain ? SolanaExternalWalletSignerConfig : C extends StellarChain ? StellarExternalWalletSignerConfig : EvmExternalWalletSignerConfig;
type ApiKeySignerConfig = {
    type: "api-key";
};
type BaseSignerConfig<C extends Chain> = ExternalWalletSignerConfigForChain<C> | ApiKeySignerConfig;
type PasskeySignerConfig = {
    type: "passkey";
    name?: string;
    onCreatePasskey?: (name: string) => Promise<{
        id: string;
        publicKey: {
            x: string;
            y: string;
        };
    }>;
    onSignWithPasskey?: (message: string) => Promise<PasskeySignResult>;
};
type BaseInternalSignerConfig = {
    locator: string;
    address: string;
    crossmint: Crossmint;
    clientTEEConnection?: HandshakeParent<typeof signerOutboundEvents, typeof signerInboundEvents>;
};
type EmailInternalSignerConfig = EmailSignerConfig & BaseInternalSignerConfig;
type PhoneInternalSignerConfig = PhoneSignerConfig & BaseInternalSignerConfig;
type PasskeyInternalSignerConfig = PasskeySignerConfig & {
    locator: string;
    id: string;
};
type ApiKeyInternalSignerConfig = ApiKeySignerConfig & {
    locator: string;
    address: string;
};
type ExternalWalletInternalSignerConfig<C extends Chain> = ExternalWalletSignerConfigForChain<C> & {
    locator: string;
};
type InternalSignerConfig<C extends Chain> = EmailInternalSignerConfig | PhoneInternalSignerConfig | PasskeyInternalSignerConfig | ApiKeyInternalSignerConfig | ExternalWalletInternalSignerConfig<C>;
type BaseSignResult = {
    signature: string;
};
type PasskeySignResult = {
    signature: {
        r: string;
        s: string;
    };
    metadata: WebAuthnP256.SignMetadata;
};
type SignerConfigForChain<C extends Chain> = C extends SolanaChain ? EmailSignerConfig | PhoneSignerConfig | BaseSignerConfig<C> : C extends StellarChain ? EmailSignerConfig | PhoneSignerConfig | BaseSignerConfig<C> : EmailSignerConfig | PhoneSignerConfig | PasskeySignerConfig | BaseSignerConfig<C>;
type SignResultMap = {
    email: BaseSignResult;
    phone: BaseSignResult;
    "api-key": BaseSignResult;
    "external-wallet": BaseSignResult;
    passkey: PasskeySignResult;
};
interface Signer<T extends keyof SignResultMap = keyof SignResultMap> {
    type: T;
    locator(): string;
    address?(): string;
    signMessage(message: string): Promise<SignResultMap[T]>;
    signTransaction(transaction: string): Promise<SignResultMap[T]>;
}

export { type ApiKeyInternalSignerConfig, type ApiKeySignerConfig, AuthRejectedError, type BaseSignResult, type BaseSignerConfig, type EmailInternalSignerConfig, type EmailSignerConfig, type ExternalWalletInternalSignerConfig, type ExternalWalletSignerConfigForChain, type InternalSignerConfig, type NonCustodialSignerType, type PasskeyInternalSignerConfig, type PasskeySignResult, type PasskeySignerConfig, type PhoneInternalSignerConfig, type PhoneSignerConfig, type Signer, type SignerConfigForChain };
