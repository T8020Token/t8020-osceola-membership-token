export { CrossmintInternalEvent, IncomingInternalEvent, OutgoingInternalEvent } from './events/internal/index.cjs';
import { CrossmintEvents } from './events/public/events.cjs';
export { CheckoutOrderEvents, CheckoutPaymentErrorEvents, CheckoutPaymentEvents, CheckoutQuoteEvents, CheckoutRecipientEvents, CheckoutTransactionErrorEvents, CheckoutTransactionEvents } from './events/public/events.cjs';
export { CrossmintInternalEvents, IncomingInternalEvents, OutgoingInternalEvents } from './events/internal/events.cjs';
export { CrossmintInternalEventMap } from './events/internal/payloads.cjs';
export { EmbeddedCheckoutV3IncomingEventMap, embeddedCheckoutV3IncomingEvents } from './embed/v3/events/incoming.cjs';
export { EmbeddedCheckoutV3OutgoingEventMap, embeddedCheckoutV3OutgoingEvents } from './embed/v3/events/outgoing.cjs';
export { EmbeddedCheckoutV3IFrameEmitter } from './embed/v3/events/EmbeddedCheckoutV3IFrameEmitter.cjs';
import { CryptoCurrency } from './CryptoCurrency.cjs';
export { Erc20Currency, EvmNativeCurrency, SplTokenCurrency, StableCoin } from './CryptoCurrency.cjs';
import { BlockchainIncludingTestnet, PayerSupportedBlockchains, JSONObject } from '@crossmint/common-sdk-base';
import { EmptyObject } from './system.cjs';
export { CaseInsensitive, NestedPaths, TypeFromPath } from './system.cjs';
import 'zod';
import '@crossmint/client-sdk-window';

interface CrossmintEventMap {
    [CrossmintEvents.PAYMENT_PREPARATION_SUCCEEDED]: EmptyObject;
    [CrossmintEvents.QUOTE_STATUS_CHANGED]: InitialQuotePayload;
    [CrossmintEvents.QUOTE_STATUS_INVALIDATED]: EmptyObject;
    [CrossmintEvents.PAYMENT_PROCESS_STARTED]: InitialQuotePayload;
    [CrossmintEvents.PAYMENT_PREPARATION_FAILED]: CrossmintEventErrorPayload;
    [CrossmintEvents.PAYMENT_PROCESS_SUCCEEDED]: PaymentCompletedPayload;
    [CrossmintEvents.PAYMENT_PROCESS_CANCELED]: EmptyObject;
    [CrossmintEvents.PAYMENT_PROCESS_REJECTED]: PaymentRejectedPayload;
    [CrossmintEvents.ORDER_PROCESS_STARTED]: EmptyObject;
    [CrossmintEvents.TRANSACTION_FULFILLMENT_SUCCEEDED]: TransactionFulfillmentSucceededPayload;
    [CrossmintEvents.TRANSACTION_FULFILLMENT_FAILED]: TransactionFulfillmentFailedPayload;
    [CrossmintEvents.ORDER_PROCESS_FINISHED]: OrderProcessFinishedPayload;
    [CrossmintEvents.RECIPIENT_WALLET_CHANGED]: RecipientWalletChangedPayload;
    [CrossmintEvents.RECIPIENT_EMAIL_CHANGED]: RecipientEmailChangedPayload;
}
interface InitialQuotePayload {
    totalPrice: FiatPrice;
    lineItems: LineItem[];
}
interface LineItem {
    price: FiatPrice;
    gasFee?: FiatPrice;
    metadata: LineItemMetadata;
    quantity: number;
}
interface LineItemMetadata {
    imageUrl?: string;
    description?: string;
    title?: string;
    collection?: string;
}
interface CrossmintEventErrorPayload {
    error: CrossmintEventError;
}
interface CrossmintEventError {
    message: string;
    code: string;
}
interface PaymentCompletedPayload {
    orderIdentifier: string;
}
interface PaymentRejectedPayload extends CrossmintEventErrorPayload {
    orderIdentifier: string;
    paymentMethodType: PaymentMethodType;
}
declare const PaymentMethodType: {
    readonly CREDIT_CARD: "credit-card";
    readonly GOOGLE_PAY: "google-pay";
    readonly APPLE_PAY: "apple-pay";
};
type PaymentMethodType = (typeof PaymentMethodType)[keyof typeof PaymentMethodType];
type TransactionFulfillmentSucceededPayload = {
    transactionIdentifier: string;
    price: FiatPrice;
    txId: string;
} & (EVMTransaction | SolanaTransaction);
interface EVMTransaction {
    contractAddress: string;
    tokenIds: string[];
}
interface SolanaTransaction {
    mintHash: string;
}
interface TransactionFulfillmentFailedPayload {
    transactionIdentifier: string;
    price: FiatPrice;
    error: CrossmintEventError;
}
interface OrderProcessFinishedPayload {
    successfulTransactionIdentifiers: string[];
    failedTransactionIdentifiers: string[];
    verification: {
        required: false;
    } | {
        required: true;
        url: string;
    };
    totalPrice: FiatPrice;
    paymentMethodType: PaymentMethodType;
}
interface RecipientWalletChangedPayload {
    wallet: string;
}
interface RecipientEmailChangedPayload {
    email: string;
}

type CrossmintEvent = {
    [K in CrossmintEvents]: {
        type: K;
        payload: CrossmintEventMap[K];
    };
}[CrossmintEvents];

interface CrossmintEmbeddedCheckoutV3CommonProps {
    appearance?: EmbeddedCheckoutV3Appearance;
    payment: EmbeddedCheckoutV3Payment;
}
interface CrossmintEmbeddedCheckoutV3ExistingOrderProps extends CrossmintEmbeddedCheckoutV3CommonProps {
    orderId: string;
    clientSecret?: string;
    lineItems?: never;
    recipient?: never;
    locale?: never;
}
interface CrossmintEmbeddedCheckoutV3NewOrderProps extends CrossmintEmbeddedCheckoutV3CommonProps {
    orderId?: never;
    lineItems: EmbeddedCheckoutV3LineItem | EmbeddedCheckoutV3LineItem[];
    recipient?: EmbeddedCheckoutV3Recipient;
    locale?: Locale;
    metadata?: JSONObject;
}
type CrossmintEmbeddedCheckoutV3Props = CrossmintEmbeddedCheckoutV3ExistingOrderProps | CrossmintEmbeddedCheckoutV3NewOrderProps;
type EmbeddedCheckoutV3Recipient = EmbeddedCheckoutV3EmailRecipient | EmbeddedCheckoutV3WalletAddressRecipient;
type EmbeddedCheckoutV3PhysicalAddress = {
    name: string;
    line1: string;
    line2?: string;
    city: string;
    state: string;
    postalCode: string;
    country: "US";
};
type EmbeddedCheckoutV3EmailRecipient = {
    email: string;
    walletAddress?: never;
    physicalAddress?: EmbeddedCheckoutV3PhysicalAddress;
};
type EmbeddedCheckoutV3WalletAddressRecipient = {
    walletAddress: string;
    email?: never;
    physicalAddress?: EmbeddedCheckoutV3PhysicalAddress;
};
type EmbeddedCheckoutV3LineItem = {
    collectionLocator: string;
    callData?: Record<string, any>;
} | {
    tokenLocator: string;
    callData?: Record<string, any>;
    executionParameters?: never;
} | {
    tokenLocator: string;
    callData?: never;
    executionParameters?: Record<string, any>;
} | {
    productLocator: string;
};
type EmbeddedCheckoutV3Appearance = {
    fonts?: Array<{
        cssSrc: string;
    }>;
    variables?: EmbeddedCheckoutV3AppearanceVariables;
    rules?: EmbeddedCheckoutV3AppearanceRules;
};
type EmbeddedCheckoutV3AppearanceVariables = {
    fontFamily?: string;
    spacingUnit?: string;
    fontSizeUnit?: string;
    borderRadius?: string;
    colors?: {
        borderPrimary?: string;
        backgroundPrimary?: string;
        textPrimary?: string;
        textSecondary?: string;
        danger?: string;
        warning?: string;
        accent?: string;
    };
};
type EmbeddedCheckoutV3AppearanceRules = {
    DestinationInput?: {
        display?: "hidden";
    };
    ReceiptEmailInput?: {
        display?: "hidden";
    };
    Label?: {
        font?: {
            family?: string;
            size?: string;
            weight?: string;
        };
        colors?: {
            text?: string;
        };
    };
    Input?: {
        borderRadius?: string;
        font?: {
            family?: string;
            size?: string;
            weight?: string;
        };
        colors?: {
            text?: string;
            background?: string;
            border?: string;
            boxShadow?: string;
            placeholder?: string;
        };
        hover?: {
            colors?: {
                text?: string;
                background?: string;
                border?: string;
                boxShadow?: string;
            };
        };
        focus?: {
            colors?: {
                background?: string;
                border?: string;
                boxShadow?: string;
            };
        };
    };
    Tab?: {
        borderRadius?: string;
        font?: {
            family?: string;
            size?: string;
            weight?: string;
        };
        colors?: {
            text?: string;
            background?: string;
            border?: string;
            boxShadow?: string;
        };
        hover?: {
            colors?: {
                text?: string;
                background?: string;
                border?: string;
                boxShadow?: string;
            };
        };
        selected?: {
            colors?: {
                text?: string;
                background?: string;
                border?: string;
                boxShadow?: string;
            };
        };
    };
    PrimaryButton?: {
        borderRadius?: string;
        font?: {
            family?: string;
            size?: string;
            weight?: string;
        };
        colors?: {
            text?: string;
            background?: string;
        };
        hover?: {
            colors?: {
                text?: string;
                background?: string;
            };
        };
        disabled?: {
            colors?: {
                text?: string;
                background?: string;
            };
        };
    };
};
type EmbeddedCheckoutV3Payment = {
    receiptEmail?: string;
    fiat: EmbeddedCheckoutV3FiatPayment;
    crypto: EmbeddedCheckoutV3CryptoPayment;
    defaultMethod?: "fiat" | "crypto";
};
type EmbeddedCheckoutV3FiatPayment = {
    enabled: boolean;
    defaultCurrency?: Currency;
    allowedMethods?: {
        card?: boolean;
        applePay?: boolean;
        googlePay?: boolean;
    };
};
type EmbeddedCheckoutV3CryptoPayment = {
    enabled: boolean;
    defaultChain?: BlockchainIncludingTestnet;
    defaultCurrency?: CryptoCurrency;
    payer?: EmbeddedCheckoutPayer;
};
type TransactionResponse = {
    success: true;
    txId: string;
} | {
    success: false;
    errorMessage: string;
};
type EmbeddedCheckoutPayer = {
    address: string;
    initialChain: PayerSupportedBlockchains;
    supportedChains?: PayerSupportedBlockchains[];
    handleSignAndSendTransaction(serializedTransaction: string): Promise<TransactionResponse>;
    handleChainSwitch(chain: PayerSupportedBlockchains): Promise<void>;
};

interface CrossmintHostedCheckoutV3Props {
    recipient?: EmbeddedCheckoutV3Recipient;
    locale?: Locale;
    lineItems: EmbeddedCheckoutV3LineItem | EmbeddedCheckoutV3LineItem[];
    payment: HostedCheckoutV3Payment;
    appearance?: CrossmintHostedCheckoutV3Appearance;
    metadata?: JSONObject;
}
type HostedCheckoutV3Payment = {
    receiptEmail?: string;
    fiat: HostedCheckoutV3FiatPayment;
    crypto: HostedCheckoutV3CryptoPayment;
    defaultMethod?: "fiat" | "crypto";
};
type HostedCheckoutV3FiatPayment = {
    enabled: boolean;
    defaultCurrency?: Currency;
};
type HostedCheckoutV3CryptoPayment = {
    enabled: boolean;
    defaultChain?: BlockchainIncludingTestnet;
    defaultCurrency?: CryptoCurrency;
};
interface CrossmintHostedCheckoutV3Appearance {
    theme?: {
        checkout?: CrossmintHostedCheckoutV3Theme;
        button?: CrossmintHostedCheckoutV3ButtonTheme;
    };
    variables?: CrossmintHostedCheckoutV3AppearanceVariables;
    overlay?: CrossmintHostedCheckoutV3OverlayOptions;
    display?: "popup" | "new-tab" | "same-tab";
    rules?: HostedCheckoutV3AppearanceRules;
}
type HostedCheckoutV3AppearanceRules = {
    DestinationInput?: {
        display?: "hidden";
    };
    ReceiptEmailInput?: {
        display?: "hidden";
    };
};
type CrossmintHostedCheckoutV3Theme = "light" | "dark";
type CrossmintHostedCheckoutV3ButtonTheme = "light" | "dark" | "crossmint";
interface CrossmintHostedCheckoutV3AppearanceVariables {
    colors?: {
        accent?: string;
    };
}
type CrossmintHostedCheckoutV3OverlayOptions = {
    enabled: boolean;
};

declare const BaseUrls: {
    readonly prod: "https://www.crossmint.com";
    readonly staging: "https://staging.crossmint.com";
    readonly dev: "http://localhost:3001";
};
type BaseUrls = (typeof BaseUrls)[keyof typeof BaseUrls];
declare const CryptoPaymentMethod: {
    readonly ETH: "ETH";
    readonly SOL: "SOL";
};
type CryptoPaymentMethod = (typeof CryptoPaymentMethod)[keyof typeof CryptoPaymentMethod];
declare const PaymentMethod: {
    readonly ETH: "ETH";
    readonly SOL: "SOL";
    readonly FIAT: "fiat";
};
type PaymentMethod = (typeof PaymentMethod)[keyof typeof PaymentMethod];
declare const paymentMethodIsEth: (paymentMethod?: PaymentMethod) => paymentMethod is "ETH";
declare const paymentMethodIsSol: (paymentMethod?: PaymentMethod) => paymentMethod is "SOL";
type Locale = "en-US" | "es-ES" | "fr-FR" | "it-IT" | "ja-JP" | "ko-KR" | "pt-PT" | "zh-CN" | "zh-TW" | "de-DE" | "ru-RU" | "tr-TR" | "uk-UA" | "th-TH" | "vi-VN" | "Klingon";
type Currency = "usd" | "eur" | "gbp" | "aud" | "sgd" | "hkd" | "krw" | "inr" | "vnd" | "jpy";
interface FiatPrice {
    amount: string;
    currency: Currency;
}
type Recipient = {
    email?: string;
    wallet?: string;
};

export { BaseUrls, type CrossmintEmbeddedCheckoutV3ExistingOrderProps, type CrossmintEmbeddedCheckoutV3NewOrderProps, type CrossmintEmbeddedCheckoutV3Props, type CrossmintEvent, type CrossmintEventError, type CrossmintEventErrorPayload, type CrossmintEventMap, CrossmintEvents, type CrossmintHostedCheckoutV3Appearance, type CrossmintHostedCheckoutV3AppearanceVariables, type CrossmintHostedCheckoutV3ButtonTheme, type CrossmintHostedCheckoutV3OverlayOptions, type CrossmintHostedCheckoutV3Props, type CrossmintHostedCheckoutV3Theme, CryptoCurrency, CryptoPaymentMethod, type Currency, type EmbeddedCheckoutPayer, type EmbeddedCheckoutV3Appearance, type EmbeddedCheckoutV3AppearanceRules, type EmbeddedCheckoutV3AppearanceVariables, type EmbeddedCheckoutV3CryptoPayment, type EmbeddedCheckoutV3EmailRecipient, type EmbeddedCheckoutV3FiatPayment, type EmbeddedCheckoutV3LineItem, type EmbeddedCheckoutV3Payment, type EmbeddedCheckoutV3PhysicalAddress, type EmbeddedCheckoutV3Recipient, type EmbeddedCheckoutV3WalletAddressRecipient, EmptyObject, type FiatPrice, type HostedCheckoutV3AppearanceRules, type HostedCheckoutV3CryptoPayment, type HostedCheckoutV3FiatPayment, type HostedCheckoutV3Payment, type InitialQuotePayload, type LineItem, type LineItemMetadata, type Locale, PaymentMethod, PaymentMethodType, type Recipient, type TransactionResponse, paymentMethodIsEth, paymentMethodIsSol };
