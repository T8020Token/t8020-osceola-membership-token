declare const CheckoutPaymentErrorEvents: {
    readonly PAYMENT_PREPARATION_FAILED: "payment:preparation.failed";
    readonly PAYMENT_PROCESS_CANCELED: "payment:process.canceled";
    readonly PAYMENT_PROCESS_REJECTED: "payment:process.rejected";
};
type CheckoutPaymentErrorEvents = (typeof CheckoutPaymentErrorEvents)[keyof typeof CheckoutPaymentErrorEvents];
declare const CheckoutPaymentEvents: {
    readonly PAYMENT_PREPARATION_FAILED: "payment:preparation.failed";
    readonly PAYMENT_PROCESS_CANCELED: "payment:process.canceled";
    readonly PAYMENT_PROCESS_REJECTED: "payment:process.rejected";
    readonly PAYMENT_PREPARATION_SUCCEEDED: "payment:preparation.succeeded";
    readonly PAYMENT_PROCESS_STARTED: "payment:process.started";
    readonly PAYMENT_PROCESS_SUCCEEDED: "payment:process.succeeded";
};
type CheckoutPaymentEvents = (typeof CheckoutPaymentEvents)[keyof typeof CheckoutPaymentEvents];
declare const CheckoutOrderEvents: {
    readonly ORDER_PROCESS_STARTED: "order:process.started";
    readonly ORDER_PROCESS_FINISHED: "order:process.finished";
};
type CheckoutOrderEvents = (typeof CheckoutOrderEvents)[keyof typeof CheckoutOrderEvents];
declare const CheckoutQuoteEvents: {
    readonly QUOTE_STATUS_CHANGED: "quote:status.changed";
    readonly QUOTE_STATUS_INVALIDATED: "quote:status.invalidated";
};
type CheckoutQuoteEvents = (typeof CheckoutQuoteEvents)[keyof typeof CheckoutQuoteEvents];
declare const CheckoutRecipientEvents: {
    readonly RECIPIENT_WALLET_CHANGED: "recipient:wallet.changed";
    readonly RECIPIENT_EMAIL_CHANGED: "recipient:email.changed";
};
type CheckoutRecipientEvents = (typeof CheckoutRecipientEvents)[keyof typeof CheckoutRecipientEvents];
declare const CheckoutTransactionErrorEvents: {
    readonly TRANSACTION_FULFILLMENT_FAILED: "transaction:fulfillment.failed";
};
type CheckoutTransactionErrorEvents = (typeof CheckoutTransactionErrorEvents)[keyof typeof CheckoutTransactionErrorEvents];
declare const CheckoutTransactionEvents: {
    readonly TRANSACTION_FULFILLMENT_FAILED: "transaction:fulfillment.failed";
    readonly TRANSACTION_FULFILLMENT_SUCCEEDED: "transaction:fulfillment.succeeded";
};
type CheckoutTransactionEvents = (typeof CheckoutTransactionEvents)[keyof typeof CheckoutTransactionEvents];
declare const CrossmintEvents: {
    readonly TRANSACTION_FULFILLMENT_FAILED: "transaction:fulfillment.failed";
    readonly TRANSACTION_FULFILLMENT_SUCCEEDED: "transaction:fulfillment.succeeded";
    readonly RECIPIENT_WALLET_CHANGED: "recipient:wallet.changed";
    readonly RECIPIENT_EMAIL_CHANGED: "recipient:email.changed";
    readonly QUOTE_STATUS_CHANGED: "quote:status.changed";
    readonly QUOTE_STATUS_INVALIDATED: "quote:status.invalidated";
    readonly ORDER_PROCESS_STARTED: "order:process.started";
    readonly ORDER_PROCESS_FINISHED: "order:process.finished";
    readonly PAYMENT_PREPARATION_FAILED: "payment:preparation.failed";
    readonly PAYMENT_PROCESS_CANCELED: "payment:process.canceled";
    readonly PAYMENT_PROCESS_REJECTED: "payment:process.rejected";
    readonly PAYMENT_PREPARATION_SUCCEEDED: "payment:preparation.succeeded";
    readonly PAYMENT_PROCESS_STARTED: "payment:process.started";
    readonly PAYMENT_PROCESS_SUCCEEDED: "payment:process.succeeded";
};
type CrossmintEvents = (typeof CrossmintEvents)[keyof typeof CrossmintEvents];

export { CheckoutOrderEvents, CheckoutPaymentErrorEvents, CheckoutPaymentEvents, CheckoutQuoteEvents, CheckoutRecipientEvents, CheckoutTransactionErrorEvents, CheckoutTransactionEvents, CrossmintEvents };
